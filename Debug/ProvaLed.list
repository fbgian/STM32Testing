
ProvaLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004414  08004414  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004414  08004414  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004414  08004414  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200001dc  080045f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080045f8  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009950  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e1  00000000  00000000  00029b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b33e  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c70  00000000  00000000  000474a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a24c5  00000000  00000000  0004f116  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f15db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023ec  00000000  00000000  000f1658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800427c 	.word	0x0800427c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800427c 	.word	0x0800427c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fac7 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f845 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f93b 	bl	8000508 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000292:	f000 f899 	bl	80003c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000296:	f000 f907 	bl	80004a8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800029a:	481b      	ldr	r0, [pc, #108]	; (8000308 <main+0x88>)
 800029c:	f000 fcd6 	bl	8000c4c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002a0:	f04f 31ff 	mov.w	r1, #4294967295
 80002a4:	4818      	ldr	r0, [pc, #96]	; (8000308 <main+0x88>)
 80002a6:	f000 fd87 	bl	8000db8 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002aa:	4817      	ldr	r0, [pc, #92]	; (8000308 <main+0x88>)
 80002ac:	f000 fe4a 	bl	8000f44 <HAL_ADC_GetValue>
 80002b0:	4603      	mov	r3, r0
 80002b2:	82fb      	strh	r3, [r7, #22]

	  sprintf(msg, "%hu\r\n", raw);
 80002b4:	8afa      	ldrh	r2, [r7, #22]
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4914      	ldr	r1, [pc, #80]	; (800030c <main+0x8c>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fb22 	bl	8003904 <siprintf>

	  int potVal = atoi(msg);
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fae7 	bl	8003896 <atoi>
 80002c8:	6138      	str	r0, [r7, #16]


	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff7f 	bl	80001d0 <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	1d39      	adds	r1, r7, #4
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <main+0x90>)
 80002de:	f002 ffa7 	bl	8003230 <HAL_UART_Transmit>



	  if (potVal > 100) {
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	2b64      	cmp	r3, #100	; 0x64
 80002e6:	dd05      	ble.n	80002f4 <main+0x74>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2108      	movs	r1, #8
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <main+0x94>)
 80002ee:	f001 fcd5 	bl	8001c9c <HAL_GPIO_WritePin>
 80002f2:	e004      	b.n	80002fe <main+0x7e>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2108      	movs	r1, #8
 80002f8:	4806      	ldr	r0, [pc, #24]	; (8000314 <main+0x94>)
 80002fa:	f001 fccf 	bl	8001c9c <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(500);
 80002fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000302:	f000 faef 	bl	80008e4 <HAL_Delay>
  {
 8000306:	e7c8      	b.n	800029a <main+0x1a>
 8000308:	20000204 	.word	0x20000204
 800030c:	08004294 	.word	0x08004294
 8000310:	20000254 	.word	0x20000254
 8000314:	48000400 	.word	0x48000400

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b096      	sub	sp, #88	; 0x58
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fae4 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 031c 	add.w	r3, r7, #28
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
 800034a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034c:	2302      	movs	r3, #2
 800034e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000354:	2310      	movs	r3, #16
 8000356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000358:	2302      	movs	r3, #2
 800035a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800035c:	2300      	movs	r3, #0
 800035e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000360:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000364:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fcae 	bl	8001ccc <HAL_RCC_OscConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000376:	f000 f905 	bl	8000584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037a:	230f      	movs	r3, #15
 800037c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037e:	2300      	movs	r3, #0
 8000380:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038e:	f107 031c 	add.w	r3, r7, #28
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fba1 	bl	8002adc <HAL_RCC_ClockConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003a0:	f000 f8f0 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 fdc9 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80003bc:	f000 f8e2 	bl	8000584 <Error_Handler>
  }
}
 80003c0:	bf00      	nop
 80003c2:	3758      	adds	r7, #88	; 0x58
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08a      	sub	sp, #40	; 0x28
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ce:	f107 031c 	add.w	r3, r7, #28
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
 80003e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ea:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <MX_ADC1_Init+0xdc>)
 80003ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <MX_ADC1_Init+0xdc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <MX_ADC1_Init+0xdc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000406:	2200      	movs	r2, #0
 8000408:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800040a:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000414:	2200      	movs	r2, #0
 8000416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000418:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <MX_ADC1_Init+0xdc>)
 800041a:	2201      	movs	r2, #1
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000426:	2201      	movs	r2, #1
 8000428:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800042a:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <MX_ADC1_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000434:	2204      	movs	r2, #4
 8000436:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <MX_ADC1_Init+0xdc>)
 800043a:	2200      	movs	r2, #0
 800043c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000440:	2200      	movs	r2, #0
 8000442:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000444:	4817      	ldr	r0, [pc, #92]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000446:	f000 fa6f 	bl	8000928 <HAL_ADC_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000450:	f000 f898 	bl	8000584 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000458:	f107 031c 	add.w	r3, r7, #28
 800045c:	4619      	mov	r1, r3
 800045e:	4811      	ldr	r0, [pc, #68]	; (80004a4 <MX_ADC1_Init+0xdc>)
 8000460:	f001 f840 	bl	80014e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800046a:	f000 f88b 	bl	8000584 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046e:	2301      	movs	r3, #1
 8000470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000472:	2301      	movs	r3, #1
 8000474:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <MX_ADC1_Init+0xdc>)
 800048c:	f000 fd68 	bl	8000f60 <HAL_ADC_ConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000496:	f000 f875 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	3728      	adds	r7, #40	; 0x28
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000204 	.word	0x20000204

080004a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <MX_USART2_UART_Init+0x5c>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_USART2_UART_Init+0x58>)
 80004ec:	f002 fe52 	bl	8003194 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004f6:	f000 f845 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000254 	.word	0x20000254
 8000504:	40004400 	.word	0x40004400

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_GPIO_Init+0x74>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a16      	ldr	r2, [pc, #88]	; (800057c <MX_GPIO_Init+0x74>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_GPIO_Init+0x74>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_GPIO_Init+0x74>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <MX_GPIO_Init+0x74>)
 800053c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_GPIO_Init+0x74>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2108      	movs	r1, #8
 8000552:	480b      	ldr	r0, [pc, #44]	; (8000580 <MX_GPIO_Init+0x78>)
 8000554:	f001 fba2 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000558:	2308      	movs	r3, #8
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_GPIO_Init+0x78>)
 8000570:	f001 fa22 	bl	80019b8 <HAL_GPIO_Init>

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	48000400 	.word	0x48000400

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_MspInit+0x44>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_MspInit+0x44>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <HAL_MspInit+0x44>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <HAL_MspInit+0x44>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_MspInit+0x44>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005fc:	d124      	bne.n	8000648 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_ADC_MspInit+0x74>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <HAL_ADC_MspInit+0x74>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <HAL_ADC_MspInit+0x74>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_ADC_MspInit+0x74>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <HAL_ADC_MspInit+0x74>)
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <HAL_ADC_MspInit+0x74>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f001 f9b8 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_UART_MspInit+0x7c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d128      	bne.n	80006c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <HAL_UART_MspInit+0x80>)
 800067c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_UART_MspInit+0x80>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_UART_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006a6:	230c      	movs	r3, #12
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006b6:	2307      	movs	r3, #7
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f001 f978 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40004400 	.word	0x40004400
 80006d4:	40021000 	.word	0x40021000

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f8ba 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f003 f89c 	bl	80038a0 <__errno>
 8000768:	4602      	mov	r2, r0
 800076a:	230c      	movs	r3, #12
 800076c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20003000 	.word	0x20003000
 8000794:	00000400 	.word	0x00000400
 8000798:	200001f8 	.word	0x200001f8
 800079c:	200002e0 	.word	0x200002e0

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490e      	ldr	r1, [pc, #56]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0b      	ldr	r4, [pc, #44]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffd7 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f003 f85b 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f6:	f7ff fd43 	bl	8000280 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000808:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 800080c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000810:	200002e0 	.word	0x200002e0

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f001 f891 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff feae 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f89b 	bl	800199e <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f001 f871 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200002d8 	.word	0x200002d8

080008cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200002d8 	.word	0x200002d8

080008e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff ffee 	bl	80008cc <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_Delay+0x40>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffde 	bl	80008cc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09a      	sub	sp, #104	; 0x68
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000936:	2300      	movs	r3, #0
 8000938:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e172      	b.n	8000c2e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	2b00      	cmp	r3, #0
 8000958:	d176      	bne.n	8000a48 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	2b00      	cmp	r3, #0
 8000960:	d152      	bne.n	8000a08 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fe2d 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d13b      	bne.n	8000a08 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fecb 	bl	800172c <ADC_Disable>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d12f      	bne.n	8000a08 <HAL_ADC_Init+0xe0>
 80009a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d12b      	bne.n	8000a08 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	f043 0202 	orr.w	r2, r3, #2
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009d2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009e4:	4b94      	ldr	r3, [pc, #592]	; (8000c38 <HAL_ADC_Init+0x310>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a94      	ldr	r2, [pc, #592]	; (8000c3c <HAL_ADC_Init+0x314>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9a      	lsrs	r2, r3, #18
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009fa:	e002      	b.n	8000a02 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f9      	bne.n	80009fc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d007      	beq.n	8000a26 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a24:	d110      	bne.n	8000a48 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f023 0312 	bic.w	r3, r3, #18
 8000a2e:	f043 0210 	orr.w	r2, r3, #16
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f043 0201 	orr.w	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f040 80df 	bne.w	8000c14 <HAL_ADC_Init+0x2ec>
 8000a56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 80da 	bne.w	8000c14 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f040 80d2 	bne.w	8000c14 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a78:	f043 0202 	orr.w	r2, r3, #2
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a80:	4b6f      	ldr	r3, [pc, #444]	; (8000c40 <HAL_ADC_Init+0x318>)
 8000a82:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a8c:	d102      	bne.n	8000a94 <HAL_ADC_Init+0x16c>
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <HAL_ADC_Init+0x31c>)
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e002      	b.n	8000a9a <HAL_ADC_Init+0x172>
 8000a94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a98:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d108      	bne.n	8000aba <HAL_ADC_Init+0x192>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d101      	bne.n	8000aba <HAL_ADC_Init+0x192>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_ADC_Init+0x194>
 8000aba:	2300      	movs	r3, #0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d11c      	bne.n	8000afa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d010      	beq.n	8000ae8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d107      	bne.n	8000ae2 <HAL_ADC_Init+0x1ba>
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d101      	bne.n	8000ae2 <HAL_ADC_Init+0x1ba>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_ADC_Init+0x1bc>
 8000ae2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d108      	bne.n	8000afa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7e5b      	ldrb	r3, [r3, #25]
 8000afe:	035b      	lsls	r3, r3, #13
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b04:	2a01      	cmp	r2, #1
 8000b06:	d002      	beq.n	8000b0e <HAL_ADC_Init+0x1e6>
 8000b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b0c:	e000      	b.n	8000b10 <HAL_ADC_Init+0x1e8>
 8000b0e:	2200      	movs	r2, #0
 8000b10:	431a      	orrs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b20:	4313      	orrs	r3, r2
 8000b22:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d11b      	bne.n	8000b66 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7e5b      	ldrb	r3, [r3, #25]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d109      	bne.n	8000b4a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	045a      	lsls	r2, r3, #17
 8000b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b40:	4313      	orrs	r3, r2
 8000b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b46:	663b      	str	r3, [r7, #96]	; 0x60
 8000b48:	e00d      	b.n	8000b66 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b52:	f043 0220 	orr.w	r2, r3, #32
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f043 0201 	orr.w	r2, r3, #1
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d007      	beq.n	8000b7e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b76:	4313      	orrs	r3, r2
 8000b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d114      	bne.n	8000bb6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b9a:	f023 0302 	bic.w	r3, r3, #2
 8000b9e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7e1b      	ldrb	r3, [r3, #24]
 8000ba4:	039a      	lsls	r2, r3, #14
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <HAL_ADC_Init+0x320>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10c      	bne.n	8000bec <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f023 010f 	bic.w	r1, r3, #15
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bea:	e007      	b.n	8000bfc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 020f 	bic.w	r2, r2, #15
 8000bfa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f023 0303 	bic.w	r3, r3, #3
 8000c0a:	f043 0201 	orr.w	r2, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
 8000c12:	e00a      	b.n	8000c2a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f023 0312 	bic.w	r3, r3, #18
 8000c1c:	f043 0210 	orr.w	r2, r3, #16
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c24:	2301      	movs	r3, #1
 8000c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3768      	adds	r7, #104	; 0x68
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	50000300 	.word	0x50000300
 8000c44:	50000100 	.word	0x50000100
 8000c48:	fff0c007 	.word	0xfff0c007

08000c4c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 809c 	bne.w	8000da0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d101      	bne.n	8000c76 <HAL_ADC_Start+0x2a>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e097      	b.n	8000da6 <HAL_ADC_Start+0x15a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 fcf6 	bl	8001670 <ADC_Enable>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 8083 	bne.w	8000d96 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ca4:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <HAL_ADC_Start+0x164>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 031f 	and.w	r3, r3, #31
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <HAL_ADC_Start+0x6e>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb8:	d115      	bne.n	8000ce6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d027      	beq.n	8000d24 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ce4:	e01e      	b.n	8000d24 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfa:	d004      	beq.n	8000d06 <HAL_ADC_Start+0xba>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2c      	ldr	r2, [pc, #176]	; (8000db4 <HAL_ADC_Start+0x168>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10e      	bne.n	8000d24 <HAL_ADC_Start+0xd8>
 8000d06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d30:	d106      	bne.n	8000d40 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f023 0206 	bic.w	r2, r3, #6
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	645a      	str	r2, [r3, #68]	; 0x44
 8000d3e:	e002      	b.n	8000d46 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	221c      	movs	r2, #28
 8000d54:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_ADC_Start+0x164>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 031f 	and.w	r3, r3, #31
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d010      	beq.n	8000d84 <HAL_ADC_Start+0x138>
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_ADC_Start+0x164>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f003 031f 	and.w	r3, r3, #31
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	d00a      	beq.n	8000d84 <HAL_ADC_Start+0x138>
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_ADC_Start+0x164>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	2b09      	cmp	r3, #9
 8000d78:	d004      	beq.n	8000d84 <HAL_ADC_Start+0x138>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d82:	d10f      	bne.n	8000da4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0204 	orr.w	r2, r2, #4
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	e006      	b.n	8000da4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000d9e:	e001      	b.n	8000da4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000da0:	2302      	movs	r3, #2
 8000da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	50000300 	.word	0x50000300
 8000db4:	50000100 	.word	0x50000100

08000db8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d102      	bne.n	8000dd4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e02e      	b.n	8000e32 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dd4:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <HAL_ADC_PollForConversion+0x188>)
 8000dd6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d112      	bne.n	8000e0a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d11d      	bne.n	8000e2e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f043 0220 	orr.w	r2, r3, #32
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e096      	b.n	8000f38 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00b      	beq.n	8000e2e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f043 0220 	orr.w	r2, r3, #32
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e084      	b.n	8000f38 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e2e:	230c      	movs	r3, #12
 8000e30:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_ADC_PollForConversion+0x188>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d004      	beq.n	8000e48 <HAL_ADC_PollForConversion+0x90>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e46:	d104      	bne.n	8000e52 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e003      	b.n	8000e5a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000e52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000e5a:	f7ff fd37 	bl	80008cc <HAL_GetTick>
 8000e5e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e60:	e01a      	b.n	8000e98 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d016      	beq.n	8000e98 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <HAL_ADC_PollForConversion+0xc8>
 8000e70:	f7ff fd2c 	bl	80008cc <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d20b      	bcs.n	8000e98 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f043 0204 	orr.w	r2, r3, #4
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e04f      	b.n	8000f38 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0dd      	beq.n	8000e62 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d131      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d12c      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d125      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d112      	bne.n	8000f0c <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d112      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f043 0201 	orr.w	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0a:	e00b      	b.n	8000f24 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f043 0220 	orr.w	r2, r3, #32
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d103      	bne.n	8000f36 <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	50000300 	.word	0x50000300

08000f44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b09b      	sub	sp, #108	; 0x6c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_ConfigChannel+0x22>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e2a5      	b.n	80014ce <HAL_ADC_ConfigChannel+0x56e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f040 8289 	bne.w	80014ac <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d81c      	bhi.n	8000fdc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	231f      	movs	r3, #31
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4019      	ands	r1, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fda:	e063      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	d81e      	bhi.n	8001022 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	3b1e      	subs	r3, #30
 8000ff8:	221f      	movs	r2, #31
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4019      	ands	r1, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	3b1e      	subs	r3, #30
 8001014:	fa00 f203 	lsl.w	r2, r0, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
 8001020:	e040      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b0e      	cmp	r3, #14
 8001028:	d81e      	bhi.n	8001068 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	3b3c      	subs	r3, #60	; 0x3c
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3b3c      	subs	r3, #60	; 0x3c
 800105a:	fa00 f203 	lsl.w	r2, r0, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
 8001066:	e01d      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	3b5a      	subs	r3, #90	; 0x5a
 800107c:	221f      	movs	r2, #31
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	4019      	ands	r1, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	3b5a      	subs	r3, #90	; 0x5a
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 80e5 	bne.w	800127e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d91c      	bls.n	80010f6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6999      	ldr	r1, [r3, #24]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	3b1e      	subs	r3, #30
 80010ce:	2207      	movs	r2, #7
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	3b1e      	subs	r3, #30
 80010e8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	e019      	b.n	800112a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6959      	ldr	r1, [r3, #20]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	08db      	lsrs	r3, r3, #3
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	3b01      	subs	r3, #1
 8001148:	2b03      	cmp	r3, #3
 800114a:	d84f      	bhi.n	80011ec <HAL_ADC_ConfigChannel+0x28c>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <HAL_ADC_ConfigChannel+0x1f4>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	08001165 	.word	0x08001165
 8001158:	08001187 	.word	0x08001187
 800115c:	080011a9 	.word	0x080011a9
 8001160:	080011cb 	.word	0x080011cb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116a:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <HAL_ADC_ConfigChannel+0x484>)
 800116c:	4013      	ands	r3, r2
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	0691      	lsls	r1, r2, #26
 8001174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001176:	430a      	orrs	r2, r1
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001182:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001184:	e07e      	b.n	8001284 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800118c:	4b95      	ldr	r3, [pc, #596]	; (80013e4 <HAL_ADC_ConfigChannel+0x484>)
 800118e:	4013      	ands	r3, r2
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	0691      	lsls	r1, r2, #26
 8001196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001198:	430a      	orrs	r2, r1
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011a4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011a6:	e06d      	b.n	8001284 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011ae:	4b8d      	ldr	r3, [pc, #564]	; (80013e4 <HAL_ADC_ConfigChannel+0x484>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	0691      	lsls	r1, r2, #26
 80011b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ba:	430a      	orrs	r2, r1
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011c6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011c8:	e05c      	b.n	8001284 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011d0:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <HAL_ADC_ConfigChannel+0x484>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	0691      	lsls	r1, r2, #26
 80011da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011dc:	430a      	orrs	r2, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011e8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011ea:	e04b      	b.n	8001284 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	069b      	lsls	r3, r3, #26
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d107      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800120e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	069b      	lsls	r3, r3, #26
 8001220:	429a      	cmp	r2, r3
 8001222:	d107      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001232:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800123a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	069b      	lsls	r3, r3, #26
 8001244:	429a      	cmp	r2, r3
 8001246:	d107      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001256:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800125e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	069b      	lsls	r3, r3, #26
 8001268:	429a      	cmp	r2, r3
 800126a:	d10a      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800127a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800127c:	e001      	b.n	8001282 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001282:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d108      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x344>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x344>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x346>
 80012a4:	2300      	movs	r3, #0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 810b 	bne.w	80014c2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00f      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2201      	movs	r2, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	400a      	ands	r2, r1
 80012ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80012d2:	e049      	b.n	8001368 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b09      	cmp	r3, #9
 80012f4:	d91c      	bls.n	8001330 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6999      	ldr	r1, [r3, #24]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	3b1b      	subs	r3, #27
 8001308:	2207      	movs	r2, #7
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	4019      	ands	r1, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6898      	ldr	r0, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	3b1b      	subs	r3, #27
 8001322:	fa00 f203 	lsl.w	r2, r0, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	e01b      	b.n	8001368 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6959      	ldr	r1, [r3, #20]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	2207      	movs	r2, #7
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4019      	ands	r1, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6898      	ldr	r0, [r3, #8]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_ADC_ConfigChannel+0x488>)
 800136a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b10      	cmp	r3, #16
 8001372:	d105      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800137c:	2b00      	cmp	r3, #0
 800137e:	d015      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001384:	2b11      	cmp	r3, #17
 8001386:	d105      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001398:	2b12      	cmp	r3, #18
 800139a:	f040 8092 	bne.w	80014c2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800139e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 808b 	bne.w	80014c2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013b4:	d102      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x45c>
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_ADC_ConfigChannel+0x48c>)
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e002      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x462>
 80013bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10f      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x490>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x490>
 80013de:	2301      	movs	r3, #1
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x492>
 80013e2:	bf00      	nop
 80013e4:	83fff000 	.word	0x83fff000
 80013e8:	50000300 	.word	0x50000300
 80013ec:	50000100 	.word	0x50000100
 80013f0:	2300      	movs	r3, #0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d150      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d010      	beq.n	800141e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x4b8>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x4b8>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_ADC_ConfigChannel+0x4ba>
 8001418:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800141a:	2b00      	cmp	r3, #0
 800141c:	d13c      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d11d      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x502>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800142e:	d118      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800143a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_ADC_ConfigChannel+0x57c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_ADC_ConfigChannel+0x580>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9a      	lsrs	r2, r3, #18
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001452:	e002      	b.n	800145a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3b01      	subs	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001460:	e02e      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b11      	cmp	r3, #17
 8001468:	d10b      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x522>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001472:	d106      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800147c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001480:	e01e      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b12      	cmp	r3, #18
 8001488:	d11a      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800148a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001494:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001496:	e013      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f043 0220 	orr.w	r2, r3, #32
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014aa:	e00a      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f043 0220 	orr.w	r2, r3, #32
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80014be:	e000      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	376c      	adds	r7, #108	; 0x6c
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000000 	.word	0x20000000
 80014e0:	431bde83 	.word	0x431bde83

080014e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b099      	sub	sp, #100	; 0x64
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fc:	d102      	bne.n	8001504 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80014fe:	4b5a      	ldr	r3, [pc, #360]	; (8001668 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	e002      	b.n	800150a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001508:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0a2      	b.n	800165a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800151e:	2302      	movs	r3, #2
 8001520:	e09b      	b.n	800165a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d17f      	bne.n	8001638 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d179      	bne.n	8001638 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d040      	beq.n	80015d2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001562:	035b      	lsls	r3, r3, #13
 8001564:	430b      	orrs	r3, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800156a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800158c:	2300      	movs	r3, #0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d15c      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80015ae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d14b      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	6811      	ldr	r1, [r2, #0]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	6892      	ldr	r2, [r2, #8]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015d0:	e03c      	b.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80015d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015dc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80015fe:	2300      	movs	r3, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d123      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d107      	bne.n	8001620 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001620:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001622:	2b00      	cmp	r3, #0
 8001624:	d112      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800162e:	f023 030f 	bic.w	r3, r3, #15
 8001632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001634:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001636:	e009      	b.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800164a:	e000      	b.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800164c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800165a:	4618      	mov	r0, r3
 800165c:	3764      	adds	r7, #100	; 0x64
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	50000100 	.word	0x50000100
 800166c:	50000300 	.word	0x50000300

08001670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <ADC_Enable+0x2c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <ADC_Enable+0x2c>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <ADC_Enable+0x2e>
 800169c:	2300      	movs	r3, #0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d13c      	bne.n	800171c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <ADC_Enable+0xb8>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00d      	beq.n	80016cc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f043 0210 	orr.w	r2, r3, #16
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e028      	b.n	800171e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80016dc:	f7ff f8f6 	bl	80008cc <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016e2:	e014      	b.n	800170e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016e4:	f7ff f8f2 	bl	80008cc <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d90d      	bls.n	800170e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f043 0210 	orr.w	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e007      	b.n	800171e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d1e3      	bne.n	80016e4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	8000003f 	.word	0x8000003f

0800172c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <ADC_Disable+0x2c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <ADC_Disable+0x2c>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <ADC_Disable+0x2e>
 8001758:	2300      	movs	r3, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d040      	beq.n	80017e0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030d 	and.w	r3, r3, #13
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10f      	bne.n	800178c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0202 	orr.w	r2, r2, #2
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2203      	movs	r2, #3
 8001782:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001784:	f7ff f8a2 	bl	80008cc <HAL_GetTick>
 8001788:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800178a:	e022      	b.n	80017d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f043 0210 	orr.w	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e01c      	b.n	80017e2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017a8:	f7ff f890 	bl	80008cc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d90d      	bls.n	80017d2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f043 0210 	orr.w	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e007      	b.n	80017e2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d0e3      	beq.n	80017a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff47 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff5c 	bl	8001834 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffb0 	bl	800190c <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e14e      	b.n	8001c66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8140 	beq.w	8001c60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d00b      	beq.n	8001a00 <HAL_GPIO_Init+0x48>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f4:	2b11      	cmp	r3, #17
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b12      	cmp	r3, #18
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0xea>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b12      	cmp	r3, #18
 8001aa0:	d123      	bne.n	8001aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0203 	and.w	r2, r3, #3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 809a 	beq.w	8001c60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b44:	4a50      	ldr	r2, [pc, #320]	; (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b6e:	d013      	beq.n	8001b98 <HAL_GPIO_Init+0x1e0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_GPIO_Init+0x2d4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00d      	beq.n	8001b94 <HAL_GPIO_Init+0x1dc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <HAL_GPIO_Init+0x2d8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d007      	beq.n	8001b90 <HAL_GPIO_Init+0x1d8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_GPIO_Init+0x1d4>
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e006      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b8c:	2305      	movs	r3, #5
 8001b8e:	e004      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	f002 0203 	and.w	r2, r2, #3
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	4093      	lsls	r3, r2
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001baa:	4937      	ldr	r1, [pc, #220]	; (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c06:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f47f aea9 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	48000800 	.word	0x48000800
 8001c94:	48000c00 	.word	0x48000c00
 8001c98:	40010400 	.word	0x40010400

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f000 bef4 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 816a 	beq.w	8001fca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cf6:	4bb3      	ldr	r3, [pc, #716]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d02:	4bb0      	ldr	r3, [pc, #704]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d159      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
 8001d0e:	4bad      	ldr	r3, [pc, #692]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d152      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf6>
 8001d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0x82>
 8001d48:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0xae>
 8001d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d76:	4b93      	ldr	r3, [pc, #588]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d86:	fa92 f2a2 	rbit	r2, r2
 8001d8a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 810c 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x2fc>
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8106 	bne.w	8001fc8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f000 be86 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x110>
 8001dce:	4b7d      	ldr	r3, [pc, #500]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7c      	ldr	r2, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e030      	b.n	8001e3e <HAL_RCC_OscConfig+0x172>
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x134>
 8001de6:	4b77      	ldr	r3, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a76      	ldr	r2, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b74      	ldr	r3, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a73      	ldr	r2, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01e      	b.n	8001e3e <HAL_RCC_OscConfig+0x172>
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x15a>
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x172>
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a63      	ldr	r2, [pc, #396]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3e:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f023 020f 	bic.w	r2, r3, #15
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	495d      	ldr	r1, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d059      	beq.n	8001f10 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fd36 	bl	80008cc <HAL_GetTick>
 8001e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e66:	f7fe fd31 	bl	80008cc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d902      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f000 be29 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>
 8001e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e90:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_OscConfig+0x1e2>
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x20e>
 8001eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001eca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ede:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ee2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ee6:	fa92 f2a2 	rbit	r2, r2
 8001eea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001eee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ef2:	fab2 f282 	clz	r2, r2
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f042 0220 	orr.w	r2, r2, #32
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f002 021f 	and.w	r2, r2, #31
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f202 	lsl.w	r2, r1, r2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ab      	beq.n	8001e66 <HAL_RCC_OscConfig+0x19a>
 8001f0e:	e05c      	b.n	8001fca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fcdc 	bl	80008cc <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1a:	f7fe fcd7 	bl	80008cc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d902      	bls.n	8001f30 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f000 bdcf 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>
 8001f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f34:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d102      	bne.n	8001f62 <HAL_RCC_OscConfig+0x296>
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x2c2>
 8001f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_RCC_OscConfig+0x2f8>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f92:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f96:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001fa2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001fa6:	fab2 f282 	clz	r2, r2
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f002 021f 	and.w	r2, r2, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ab      	bne.n	8001f1a <HAL_RCC_OscConfig+0x24e>
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_OscConfig+0x2fe>
 8001fc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 816f 	beq.w	80022b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fda:	4bd0      	ldr	r3, [pc, #832]	; (800231c <HAL_RCC_OscConfig+0x650>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe6:	4bcd      	ldr	r3, [pc, #820]	; (800231c <HAL_RCC_OscConfig+0x650>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d16c      	bne.n	80020cc <HAL_RCC_OscConfig+0x400>
 8001ff2:	4bca      	ldr	r3, [pc, #808]	; (800231c <HAL_RCC_OscConfig+0x650>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d166      	bne.n	80020cc <HAL_RCC_OscConfig+0x400>
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002010:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d102      	bne.n	800202e <HAL_RCC_OscConfig+0x362>
 8002028:	4bbc      	ldr	r3, [pc, #752]	; (800231c <HAL_RCC_OscConfig+0x650>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e013      	b.n	8002056 <HAL_RCC_OscConfig+0x38a>
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002046:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002052:	4bb2      	ldr	r3, [pc, #712]	; (800231c <HAL_RCC_OscConfig+0x650>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2202      	movs	r2, #2
 8002058:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800205c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002060:	fa92 f2a2 	rbit	r2, r2
 8002064:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002068:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f042 0220 	orr.w	r2, r2, #32
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f002 021f 	and.w	r2, r2, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_RCC_OscConfig+0x3cc>
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d002      	beq.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	f000 bd1b 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4ba0      	ldr	r3, [pc, #640]	; (800231c <HAL_RCC_OscConfig+0x650>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	21f8      	movs	r1, #248	; 0xf8
 80020a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020b0:	fa91 f1a1 	rbit	r1, r1
 80020b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80020b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80020bc:	fab1 f181 	clz	r1, r1
 80020c0:	b2c9      	uxtb	r1, r1
 80020c2:	408b      	lsls	r3, r1
 80020c4:	4995      	ldr	r1, [pc, #596]	; (800231c <HAL_RCC_OscConfig+0x650>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e0f5      	b.n	80022b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8085 	beq.w	80021e2 <HAL_RCC_OscConfig+0x516>
 80020d8:	2301      	movs	r3, #1
 80020da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80020ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fbe2 	bl	80008cc <HAL_GetTick>
 8002108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210e:	f7fe fbdd 	bl	80008cc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d902      	bls.n	8002124 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	f000 bcd5 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002136:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x488>
 800214e:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x650>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x4b0>
 8002154:	2302      	movs	r3, #2
 8002156:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800216c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x650>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002182:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002186:	fa92 f2a2 	rbit	r2, r2
 800218a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800218e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002192:	fab2 f282 	clz	r2, r2
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f002 021f 	and.w	r2, r2, #31
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0af      	beq.n	800210e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x650>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	21f8      	movs	r1, #248	; 0xf8
 80021be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021c6:	fa91 f1a1 	rbit	r1, r1
 80021ca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80021ce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80021d2:	fab1 f181 	clz	r1, r1
 80021d6:	b2c9      	uxtb	r1, r1
 80021d8:	408b      	lsls	r3, r1
 80021da:	4950      	ldr	r1, [pc, #320]	; (800231c <HAL_RCC_OscConfig+0x650>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e06a      	b.n	80022b8 <HAL_RCC_OscConfig+0x5ec>
 80021e2:	2301      	movs	r3, #1
 80021e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80021f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002202:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	461a      	mov	r2, r3
 800220a:	2300      	movs	r3, #0
 800220c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe fb5d 	bl	80008cc <HAL_GetTick>
 8002212:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002218:	f7fe fb58 	bl	80008cc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d902      	bls.n	800222e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	f000 bc50 	b.w	8002ace <HAL_RCC_OscConfig+0xe02>
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_RCC_OscConfig+0x592>
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_RCC_OscConfig+0x650>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	e013      	b.n	8002286 <HAL_RCC_OscConfig+0x5ba>
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002270:	2302      	movs	r3, #2
 8002272:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002276:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_RCC_OscConfig+0x650>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2202      	movs	r2, #2
 8002288:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800228c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002298:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800229c:	fab2 f282 	clz	r2, r2
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f042 0220 	orr.w	r2, r2, #32
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f002 021f 	and.w	r2, r2, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1af      	bne.n	8002218 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80da 	beq.w	800247c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d069      	beq.n	80023a6 <HAL_RCC_OscConfig+0x6da>
 80022d2:	2301      	movs	r3, #1
 80022d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80022e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x654>)
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	461a      	mov	r2, r3
 80022f8:	2301      	movs	r3, #1
 80022fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7fe fae6 	bl	80008cc <HAL_GetTick>
 8002300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002304:	e00e      	b.n	8002324 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fae1 	bl	80008cc <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d906      	bls.n	8002324 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e3d9      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	10908120 	.word	0x10908120
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002336:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800233a:	2202      	movs	r2, #2
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fa93 f2a3 	rbit	r2, r3
 8002348:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4ba5      	ldr	r3, [pc, #660]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800236e:	2102      	movs	r1, #2
 8002370:	6019      	str	r1, [r3, #0]
 8002372:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	fa93 f1a3 	rbit	r1, r3
 800237c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002380:	6019      	str	r1, [r3, #0]
  return result;
 8002382:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0b0      	beq.n	8002306 <HAL_RCC_OscConfig+0x63a>
 80023a4:	e06a      	b.n	800247c <HAL_RCC_OscConfig+0x7b0>
 80023a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023bc:	601a      	str	r2, [r3, #0]
  return result;
 80023be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b8c      	ldr	r3, [pc, #560]	; (8002600 <HAL_RCC_OscConfig+0x934>)
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	461a      	mov	r2, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fa78 	bl	80008cc <HAL_GetTick>
 80023dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e2:	f7fe fa73 	bl	80008cc <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e36b      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 80023f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023fa:	2202      	movs	r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002412:	2202      	movs	r2, #2
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800243c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243e:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002442:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002446:	2102      	movs	r1, #2
 8002448:	6019      	str	r1, [r3, #0]
 800244a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f1a3 	rbit	r1, r3
 8002454:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002458:	6019      	str	r1, [r3, #0]
  return result;
 800245a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1b2      	bne.n	80023e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8158 	beq.w	800273c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b54      	ldr	r3, [pc, #336]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <HAL_RCC_OscConfig+0x938>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11a      	bne.n	8002506 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d0:	4b4c      	ldr	r3, [pc, #304]	; (8002604 <HAL_RCC_OscConfig+0x938>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	; (8002604 <HAL_RCC_OscConfig+0x938>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024dc:	f7fe f9f6 	bl	80008cc <HAL_GetTick>
 80024e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe f9f1 	bl	80008cc <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e2e9      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <HAL_RCC_OscConfig+0x938>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0ef      	beq.n	80024e6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x852>
 8002510:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a39      	ldr	r2, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e02f      	b.n	800257e <HAL_RCC_OscConfig+0x8b2>
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x876>
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a30      	ldr	r2, [pc, #192]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e01d      	b.n	800257e <HAL_RCC_OscConfig+0x8b2>
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x89a>
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x8b2>
 8002566:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a24      	ldr	r2, [pc, #144]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a21      	ldr	r2, [pc, #132]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d06b      	beq.n	8002660 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe f9a0 	bl	80008cc <HAL_GetTick>
 800258c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00b      	b.n	80025aa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe f99b 	bl	80008cc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e291      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 80025aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025ae:	2202      	movs	r2, #2
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025c6:	2202      	movs	r2, #2
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f2a3 	rbit	r2, r3
 80025d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025d8:	601a      	str	r2, [r3, #0]
  return result;
 80025da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_OscConfig+0x93c>
 80025f4:	4b01      	ldr	r3, [pc, #4]	; (80025fc <HAL_RCC_OscConfig+0x930>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x958>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	10908120 	.word	0x10908120
 8002604:	40007000 	.word	0x40007000
 8002608:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800260c:	2202      	movs	r2, #2
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fa93 f2a3 	rbit	r2, r3
 800261a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	4bbb      	ldr	r3, [pc, #748]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002628:	2102      	movs	r1, #2
 800262a:	6011      	str	r1, [r2, #0]
 800262c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	fa92 f1a2 	rbit	r1, r2
 8002636:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800263a:	6011      	str	r1, [r2, #0]
  return result;
 800263c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	fab2 f282 	clz	r2, r2
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f002 021f 	and.w	r2, r2, #31
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d099      	beq.n	8002592 <HAL_RCC_OscConfig+0x8c6>
 800265e:	e063      	b.n	8002728 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe f934 	bl	80008cc <HAL_GetTick>
 8002664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe f92f 	bl	80008cc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e225      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 8002682:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002686:	2202      	movs	r2, #2
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800269e:	2202      	movs	r2, #2
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026b0:	601a      	str	r2, [r3, #0]
  return result;
 80026b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d102      	bne.n	80026d2 <HAL_RCC_OscConfig+0xa06>
 80026cc:	4b90      	ldr	r3, [pc, #576]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	e00d      	b.n	80026ee <HAL_RCC_OscConfig+0xa22>
 80026d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026d6:	2202      	movs	r2, #2
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	4b89      	ldr	r3, [pc, #548]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026f2:	2102      	movs	r1, #2
 80026f4:	6011      	str	r1, [r2, #0]
 80026f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	fa92 f1a2 	rbit	r1, r2
 8002700:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002704:	6011      	str	r1, [r2, #0]
  return result;
 8002706:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f002 021f 	and.w	r2, r2, #31
 800271c:	2101      	movs	r1, #1
 800271e:	fa01 f202 	lsl.w	r2, r1, r2
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1a0      	bne.n	800266a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002728:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002730:	4b77      	ldr	r3, [pc, #476]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4a76      	ldr	r2, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 81c2 	beq.w	8002acc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002748:	4b71      	ldr	r3, [pc, #452]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	f000 819c 	beq.w	8002a8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b02      	cmp	r3, #2
 800275e:	f040 8114 	bne.w	800298a <HAL_RCC_OscConfig+0xcbe>
 8002762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002766:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800277a:	601a      	str	r2, [r3, #0]
  return result;
 800277c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002780:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe f898 	bl	80008cc <HAL_GetTick>
 800279c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a0:	e009      	b.n	80027b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe f893 	bl	80008cc <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e18b      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 80027b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027ce:	601a      	str	r2, [r3, #0]
  return result;
 80027d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0xb24>
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	e01b      	b.n	8002828 <HAL_RCC_OscConfig+0xb5c>
 80027f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800280e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800282c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002830:	6011      	str	r1, [r2, #0]
 8002832:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fa92 f1a2 	rbit	r1, r2
 800283c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002840:	6011      	str	r1, [r2, #0]
  return result;
 8002842:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d19e      	bne.n	80027a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	430b      	orrs	r3, r1
 800287a:	4925      	ldr	r1, [pc, #148]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	fa93 f2a3 	rbit	r2, r3
 8002894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002898:	601a      	str	r2, [r3, #0]
  return result;
 800289a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800289e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	461a      	mov	r2, r3
 80028b2:	2301      	movs	r3, #1
 80028b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe f809 	bl	80008cc <HAL_GetTick>
 80028ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028be:	e009      	b.n	80028d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe f804 	bl	80008cc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0fc      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 80028d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ec:	601a      	str	r2, [r3, #0]
  return result;
 80028ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0xc48>
 8002908:	4b01      	ldr	r3, [pc, #4]	; (8002910 <HAL_RCC_OscConfig+0xc44>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	e01e      	b.n	800294c <HAL_RCC_OscConfig+0xc80>
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_OscConfig+0xe0c>)
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002950:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	fa92 f1a2 	rbit	r1, r2
 8002960:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d09b      	beq.n	80028c0 <HAL_RCC_OscConfig+0xbf4>
 8002988:	e0a0      	b.n	8002acc <HAL_RCC_OscConfig+0xe00>
 800298a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800298e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a2:	601a      	str	r2, [r3, #0]
  return result;
 80029a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	461a      	mov	r2, r3
 80029bc:	2300      	movs	r3, #0
 80029be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fd ff84 	bl	80008cc <HAL_GetTick>
 80029c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e009      	b.n	80029de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fd ff7f 	bl	80008cc <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e077      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
 80029de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	fa93 f2a3 	rbit	r2, r3
 80029f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f6:	601a      	str	r2, [r3, #0]
  return result;
 80029f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <HAL_RCC_OscConfig+0xd4c>
 8002a12:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_OscConfig+0xe0c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0xd84>
 8002a18:	f107 0320 	add.w	r3, r7, #32
 8002a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f107 0320 	add.w	r3, r7, #32
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f107 0318 	add.w	r3, r7, #24
 8002a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fa93 f2a3 	rbit	r2, r3
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_OscConfig+0xe0c>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f107 0210 	add.w	r2, r7, #16
 8002a54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a58:	6011      	str	r1, [r2, #0]
 8002a5a:	f107 0210 	add.w	r2, r7, #16
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	fa92 f1a2 	rbit	r1, r2
 8002a64:	f107 020c 	add.w	r2, r7, #12
 8002a68:	6011      	str	r1, [r2, #0]
  return result;
 8002a6a:	f107 020c 	add.w	r2, r7, #12
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f002 021f 	and.w	r2, r2, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d19e      	bne.n	80029ca <HAL_RCC_OscConfig+0xcfe>
 8002a8c:	e01e      	b.n	8002acc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e018      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_RCC_OscConfig+0xe0c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b09e      	sub	sp, #120	; 0x78
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e162      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b90      	ldr	r3, [pc, #576]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d910      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b8d      	ldr	r3, [pc, #564]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	498b      	ldr	r1, [pc, #556]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e14a      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b82      	ldr	r3, [pc, #520]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	497f      	ldr	r1, [pc, #508]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80dc 	beq.w	8002d08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d13c      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xf6>
 8002b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xa6>
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	e00f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0xc6>
 8002b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	663b      	str	r3, [r7, #96]	; 0x60
 8002b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b9e:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d17b      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0f3      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d13c      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x178>
 8002bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x128>
 8002bfe:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e00f      	b.n	8002c24 <HAL_RCC_ClockConfig+0x148>
 8002c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	647b      	str	r3, [r7, #68]	; 0x44
 8002c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c16:	643b      	str	r3, [r7, #64]	; 0x40
 8002c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c28:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c2c:	fa92 f2a2 	rbit	r2, r2
 8002c30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f002 021f 	and.w	r2, r2, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d13a      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b2      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
 8002c54:	2302      	movs	r3, #2
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x1a0>
 8002c76:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e00d      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1bc>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2202      	movs	r2, #2
 8002c9a:	61ba      	str	r2, [r7, #24]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	fa92 f2a2 	rbit	r2, r2
 8002ca2:	617a      	str	r2, [r7, #20]
  return result;
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	fab2 f282 	clz	r2, r2
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f042 0220 	orr.w	r2, r2, #32
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	f002 021f 	and.w	r2, r2, #31
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e079      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	491a      	ldr	r1, [pc, #104]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fd fdf8 	bl	80008cc <HAL_GetTick>
 8002cdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fd fdf4 	bl	80008cc <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e061      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d214      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 0207 	bic.w	r2, r3, #7
 8002d1e:	4906      	ldr	r1, [pc, #24]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_RCC_ClockConfig+0x25c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e040      	b.n	8002dba <HAL_RCC_ClockConfig+0x2de>
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	491a      	ldr	r1, [pc, #104]	; (8002dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4912      	ldr	r1, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d7e:	f000 f829 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d82:	4601      	mov	r1, r0
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8c:	22f0      	movs	r2, #240	; 0xf0
 8002d8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	fa92 f2a2 	rbit	r2, r2
 8002d96:	60fa      	str	r2, [r7, #12]
  return result;
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	fab2 f282 	clz	r2, r2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	40d3      	lsrs	r3, r2
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x2ec>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	fa21 f303 	lsr.w	r3, r1, r3
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_RCC_ClockConfig+0x2f0>)
 8002dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_RCC_ClockConfig+0x2f4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fd46 	bl	8000844 <HAL_InitTick>
  
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3778      	adds	r7, #120	; 0x78
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	0800429c 	.word	0x0800429c
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b08b      	sub	sp, #44	; 0x2c
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dee:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x30>
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x36>
 8002e02:	e03c      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e06:	623b      	str	r3, [r7, #32]
      break;
 8002e08:	e03c      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	607a      	str	r2, [r7, #4]
  return result;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	40d3      	lsrs	r3, r2
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	220f      	movs	r2, #15
 8002e38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	60fa      	str	r2, [r7, #12]
  return result;
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	40d3      	lsrs	r3, r2
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e5c:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	e002      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e80:	623b      	str	r3, [r7, #32]
      break;
 8002e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	372c      	adds	r7, #44	; 0x2c
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	007a1200 	.word	0x007a1200
 8002e9c:	080042b4 	.word	0x080042b4
 8002ea0:	080042c4 	.word	0x080042c4
 8002ea4:	003d0900 	.word	0x003d0900

08002ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ec6:	f7ff ffef 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ed4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ed8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	fa92 f2a2 	rbit	r2, r2
 8002ee0:	603a      	str	r2, [r7, #0]
  return result;
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	fab2 f282 	clz	r2, r2
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	40d3      	lsrs	r3, r2
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080042ac 	.word	0x080042ac

08002f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f0a:	f7ff ffcd 	bl	8002ea8 <HAL_RCC_GetHCLKFreq>
 8002f0e:	4601      	mov	r1, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	fa92 f2a2 	rbit	r2, r2
 8002f24:	603a      	str	r2, [r7, #0]
  return result;
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	40d3      	lsrs	r3, r2
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000
 8002f44:	080042ac 	.word	0x080042ac

08002f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b092      	sub	sp, #72	; 0x48
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80cd 	beq.w	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6c:	4b86      	ldr	r3, [pc, #536]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10e      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b83      	ldr	r3, [pc, #524]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a82      	ldr	r2, [pc, #520]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	61d3      	str	r3, [r2, #28]
 8002f84:	4b80      	ldr	r3, [pc, #512]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b7d      	ldr	r3, [pc, #500]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d118      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a79      	ldr	r2, [pc, #484]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7fd fc8d 	bl	80008cc <HAL_GetTick>
 8002fb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb6:	f7fd fc89 	bl	80008cc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0db      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	4b70      	ldr	r3, [pc, #448]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd4:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d07d      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d076      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	4b5e      	ldr	r3, [pc, #376]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	4b55      	ldr	r3, [pc, #340]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003044:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003048:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d045      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd fc3a 	bl	80008cc <HAL_GetTick>
 8003058:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd fc36 	bl	80008cc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e086      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003072:	2302      	movs	r3, #2
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	2302      	movs	r3, #2
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	61fb      	str	r3, [r7, #28]
  return result;
 800308a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d102      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	e007      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2202      	movs	r2, #2
 80030b8:	613a      	str	r2, [r7, #16]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	60fa      	str	r2, [r7, #12]
  return result;
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f002 021f 	and.w	r2, r2, #31
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0bd      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030e0:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4926      	ldr	r1, [pc, #152]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a22      	ldr	r2, [pc, #136]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	491a      	ldr	r1, [pc, #104]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003120:	4313      	orrs	r3, r2
 8003122:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4912      	ldr	r1, [pc, #72]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800313e:	4313      	orrs	r3, r2
 8003140:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	490b      	ldr	r1, [pc, #44]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800315c:	4313      	orrs	r3, r2
 800315e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3748      	adds	r7, #72	; 0x48
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	40007000 	.word	0x40007000
 8003190:	10908100 	.word	0x10908100

08003194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e040      	b.n	8003228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fa4c 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8c0 	bl	8003358 <UART_SetConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e022      	b.n	8003228 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9ec 	bl	80035c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fa73 	bl	800370c <UART_CheckIdleState>
 8003226:	4603      	mov	r3, r0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003244:	2b20      	cmp	r3, #32
 8003246:	f040 8082 	bne.w	800334e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_UART_Transmit+0x26>
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07a      	b.n	8003350 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_UART_Transmit+0x38>
 8003264:	2302      	movs	r3, #2
 8003266:	e073      	b.n	8003350 <HAL_UART_Transmit+0x120>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2221      	movs	r2, #33	; 0x21
 800327c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327e:	f7fd fb25 	bl	80008cc <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d108      	bne.n	80032b0 <HAL_UART_Transmit+0x80>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032c0:	e02d      	b.n	800331e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fa66 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e039      	b.n	8003350 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ee:	b292      	uxth	r2, r2
 80032f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3302      	adds	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e008      	b.n	800330c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b292      	uxth	r2, r2
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3301      	adds	r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1cb      	bne.n	80032c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	2140      	movs	r1, #64	; 0x40
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fa32 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e005      	b.n	8003350 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800334e:	2302      	movs	r3, #2
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b8b      	ldr	r3, [pc, #556]	; (80035b0 <UART_SetConfig+0x258>)
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	6979      	ldr	r1, [r7, #20]
 800338c:	430b      	orrs	r3, r1
 800338e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a79      	ldr	r2, [pc, #484]	; (80035b4 <UART_SetConfig+0x25c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d121      	bne.n	8003418 <UART_SetConfig+0xc0>
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <UART_SetConfig+0x260>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d817      	bhi.n	8003410 <UART_SetConfig+0xb8>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0x90>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003405 	.word	0x08003405
 80033f0:	0800340b 	.word	0x0800340b
 80033f4:	080033ff 	.word	0x080033ff
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e01e      	b.n	800343c <UART_SetConfig+0xe4>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e01b      	b.n	800343c <UART_SetConfig+0xe4>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e018      	b.n	800343c <UART_SetConfig+0xe4>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e015      	b.n	800343c <UART_SetConfig+0xe4>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	bf00      	nop
 8003416:	e011      	b.n	800343c <UART_SetConfig+0xe4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <UART_SetConfig+0x264>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d102      	bne.n	8003428 <UART_SetConfig+0xd0>
 8003422:	2300      	movs	r3, #0
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e009      	b.n	800343c <UART_SetConfig+0xe4>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a64      	ldr	r2, [pc, #400]	; (80035c0 <UART_SetConfig+0x268>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d102      	bne.n	8003438 <UART_SetConfig+0xe0>
 8003432:	2300      	movs	r3, #0
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e001      	b.n	800343c <UART_SetConfig+0xe4>
 8003438:	2310      	movs	r3, #16
 800343a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003444:	d15c      	bne.n	8003500 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d828      	bhi.n	800349e <UART_SetConfig+0x146>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0xfc>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003479 	.word	0x08003479
 8003458:	08003481 	.word	0x08003481
 800345c:	08003489 	.word	0x08003489
 8003460:	0800349f 	.word	0x0800349f
 8003464:	0800348f 	.word	0x0800348f
 8003468:	0800349f 	.word	0x0800349f
 800346c:	0800349f 	.word	0x0800349f
 8003470:	0800349f 	.word	0x0800349f
 8003474:	08003497 	.word	0x08003497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003478:	f7ff fd22 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 800347c:	61b8      	str	r0, [r7, #24]
        break;
 800347e:	e013      	b.n	80034a8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7ff fd40 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 8003484:	61b8      	str	r0, [r7, #24]
        break;
 8003486:	e00f      	b.n	80034a8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003488:	4b4e      	ldr	r3, [pc, #312]	; (80035c4 <UART_SetConfig+0x26c>)
 800348a:	61bb      	str	r3, [r7, #24]
        break;
 800348c:	e00c      	b.n	80034a8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348e:	f7ff fca1 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8003492:	61b8      	str	r0, [r7, #24]
        break;
 8003494:	e008      	b.n	80034a8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e004      	b.n	80034a8 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	77bb      	strb	r3, [r7, #30]
        break;
 80034a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d074      	beq.n	8003598 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	005a      	lsls	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d916      	bls.n	80034fa <UART_SetConfig+0x1a2>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d212      	bcs.n	80034fa <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	89fa      	ldrh	r2, [r7, #14]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	e04e      	b.n	8003598 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	77bb      	strb	r3, [r7, #30]
 80034fe:	e04b      	b.n	8003598 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003500:	7ffb      	ldrb	r3, [r7, #31]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d827      	bhi.n	8003556 <UART_SetConfig+0x1fe>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <UART_SetConfig+0x1b4>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003531 	.word	0x08003531
 8003510:	08003539 	.word	0x08003539
 8003514:	08003541 	.word	0x08003541
 8003518:	08003557 	.word	0x08003557
 800351c:	08003547 	.word	0x08003547
 8003520:	08003557 	.word	0x08003557
 8003524:	08003557 	.word	0x08003557
 8003528:	08003557 	.word	0x08003557
 800352c:	0800354f 	.word	0x0800354f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7ff fcc6 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 8003534:	61b8      	str	r0, [r7, #24]
        break;
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7ff fce4 	bl	8002f04 <HAL_RCC_GetPCLK2Freq>
 800353c:	61b8      	str	r0, [r7, #24]
        break;
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <UART_SetConfig+0x26c>)
 8003542:	61bb      	str	r3, [r7, #24]
        break;
 8003544:	e00c      	b.n	8003560 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7ff fc45 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 800354a:	61b8      	str	r0, [r7, #24]
        break;
 800354c:	e008      	b.n	8003560 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	61bb      	str	r3, [r7, #24]
        break;
 8003554:	e004      	b.n	8003560 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77bb      	strb	r3, [r7, #30]
        break;
 800355e:	bf00      	nop
    }

    if (pclk != 0U)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085a      	lsrs	r2, r3, #1
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d908      	bls.n	8003594 <UART_SetConfig+0x23c>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d204      	bcs.n	8003594 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e001      	b.n	8003598 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	efff69f3 	.word	0xefff69f3
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40004400 	.word	0x40004400
 80035c0:	40004800 	.word	0x40004800
 80035c4:	007a1200 	.word	0x007a1200

080035c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c6:	d10a      	bne.n	80036de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800371c:	f7fd f8d6 	bl	80008cc <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d10e      	bne.n	800374e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f82d 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e023      	b.n	8003796 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d10e      	bne.n	800377a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f817 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00d      	b.n	8003796 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ae:	e05e      	b.n	800386e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d05a      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b8:	f7fd f888 	bl	80008cc <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d302      	bcc.n	80037ce <UART_WaitOnFlagUntilTimeout+0x30>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11b      	bne.n	8003806 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e043      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02c      	beq.n	800386e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003822:	d124      	bne.n	800386e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800382c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800383c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e00f      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	429a      	cmp	r2, r3
 800388a:	d091      	beq.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <atoi>:
 8003896:	220a      	movs	r2, #10
 8003898:	2100      	movs	r1, #0
 800389a:	f000 b8cf 	b.w	8003a3c <strtol>
	...

080038a0 <__errno>:
 80038a0:	4b01      	ldr	r3, [pc, #4]	; (80038a8 <__errno+0x8>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	2000000c 	.word	0x2000000c

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	4e0d      	ldr	r6, [pc, #52]	; (80038e4 <__libc_init_array+0x38>)
 80038b0:	4c0d      	ldr	r4, [pc, #52]	; (80038e8 <__libc_init_array+0x3c>)
 80038b2:	1ba4      	subs	r4, r4, r6
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	2500      	movs	r5, #0
 80038b8:	42a5      	cmp	r5, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	4e0b      	ldr	r6, [pc, #44]	; (80038ec <__libc_init_array+0x40>)
 80038be:	4c0c      	ldr	r4, [pc, #48]	; (80038f0 <__libc_init_array+0x44>)
 80038c0:	f000 fcdc 	bl	800427c <_init>
 80038c4:	1ba4      	subs	r4, r4, r6
 80038c6:	10a4      	asrs	r4, r4, #2
 80038c8:	2500      	movs	r5, #0
 80038ca:	42a5      	cmp	r5, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d4:	4798      	blx	r3
 80038d6:	3501      	adds	r5, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038de:	4798      	blx	r3
 80038e0:	3501      	adds	r5, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	08004414 	.word	0x08004414
 80038e8:	08004414 	.word	0x08004414
 80038ec:	08004414 	.word	0x08004414
 80038f0:	08004418 	.word	0x08004418

080038f4 <memset>:
 80038f4:	4402      	add	r2, r0
 80038f6:	4603      	mov	r3, r0
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <siprintf>:
 8003904:	b40e      	push	{r1, r2, r3}
 8003906:	b500      	push	{lr}
 8003908:	b09c      	sub	sp, #112	; 0x70
 800390a:	ab1d      	add	r3, sp, #116	; 0x74
 800390c:	9002      	str	r0, [sp, #8]
 800390e:	9006      	str	r0, [sp, #24]
 8003910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003914:	4809      	ldr	r0, [pc, #36]	; (800393c <siprintf+0x38>)
 8003916:	9107      	str	r1, [sp, #28]
 8003918:	9104      	str	r1, [sp, #16]
 800391a:	4909      	ldr	r1, [pc, #36]	; (8003940 <siprintf+0x3c>)
 800391c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003920:	9105      	str	r1, [sp, #20]
 8003922:	6800      	ldr	r0, [r0, #0]
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	a902      	add	r1, sp, #8
 8003928:	f000 f90e 	bl	8003b48 <_svfiprintf_r>
 800392c:	9b02      	ldr	r3, [sp, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	b01c      	add	sp, #112	; 0x70
 8003934:	f85d eb04 	ldr.w	lr, [sp], #4
 8003938:	b003      	add	sp, #12
 800393a:	4770      	bx	lr
 800393c:	2000000c 	.word	0x2000000c
 8003940:	ffff0208 	.word	0xffff0208

08003944 <_strtol_l.isra.0>:
 8003944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	4680      	mov	r8, r0
 800394a:	4689      	mov	r9, r1
 800394c:	4692      	mov	sl, r2
 800394e:	461e      	mov	r6, r3
 8003950:	460f      	mov	r7, r1
 8003952:	463d      	mov	r5, r7
 8003954:	9808      	ldr	r0, [sp, #32]
 8003956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800395a:	f000 f885 	bl	8003a68 <__locale_ctype_ptr_l>
 800395e:	4420      	add	r0, r4
 8003960:	7843      	ldrb	r3, [r0, #1]
 8003962:	f013 0308 	ands.w	r3, r3, #8
 8003966:	d132      	bne.n	80039ce <_strtol_l.isra.0+0x8a>
 8003968:	2c2d      	cmp	r4, #45	; 0x2d
 800396a:	d132      	bne.n	80039d2 <_strtol_l.isra.0+0x8e>
 800396c:	787c      	ldrb	r4, [r7, #1]
 800396e:	1cbd      	adds	r5, r7, #2
 8003970:	2201      	movs	r2, #1
 8003972:	2e00      	cmp	r6, #0
 8003974:	d05d      	beq.n	8003a32 <_strtol_l.isra.0+0xee>
 8003976:	2e10      	cmp	r6, #16
 8003978:	d109      	bne.n	800398e <_strtol_l.isra.0+0x4a>
 800397a:	2c30      	cmp	r4, #48	; 0x30
 800397c:	d107      	bne.n	800398e <_strtol_l.isra.0+0x4a>
 800397e:	782b      	ldrb	r3, [r5, #0]
 8003980:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003984:	2b58      	cmp	r3, #88	; 0x58
 8003986:	d14f      	bne.n	8003a28 <_strtol_l.isra.0+0xe4>
 8003988:	786c      	ldrb	r4, [r5, #1]
 800398a:	2610      	movs	r6, #16
 800398c:	3502      	adds	r5, #2
 800398e:	2a00      	cmp	r2, #0
 8003990:	bf14      	ite	ne
 8003992:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003996:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800399a:	2700      	movs	r7, #0
 800399c:	fbb1 fcf6 	udiv	ip, r1, r6
 80039a0:	4638      	mov	r0, r7
 80039a2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80039a6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80039aa:	2b09      	cmp	r3, #9
 80039ac:	d817      	bhi.n	80039de <_strtol_l.isra.0+0x9a>
 80039ae:	461c      	mov	r4, r3
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	dd23      	ble.n	80039fc <_strtol_l.isra.0+0xb8>
 80039b4:	1c7b      	adds	r3, r7, #1
 80039b6:	d007      	beq.n	80039c8 <_strtol_l.isra.0+0x84>
 80039b8:	4584      	cmp	ip, r0
 80039ba:	d31c      	bcc.n	80039f6 <_strtol_l.isra.0+0xb2>
 80039bc:	d101      	bne.n	80039c2 <_strtol_l.isra.0+0x7e>
 80039be:	45a6      	cmp	lr, r4
 80039c0:	db19      	blt.n	80039f6 <_strtol_l.isra.0+0xb2>
 80039c2:	fb00 4006 	mla	r0, r0, r6, r4
 80039c6:	2701      	movs	r7, #1
 80039c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039cc:	e7eb      	b.n	80039a6 <_strtol_l.isra.0+0x62>
 80039ce:	462f      	mov	r7, r5
 80039d0:	e7bf      	b.n	8003952 <_strtol_l.isra.0+0xe>
 80039d2:	2c2b      	cmp	r4, #43	; 0x2b
 80039d4:	bf04      	itt	eq
 80039d6:	1cbd      	addeq	r5, r7, #2
 80039d8:	787c      	ldrbeq	r4, [r7, #1]
 80039da:	461a      	mov	r2, r3
 80039dc:	e7c9      	b.n	8003972 <_strtol_l.isra.0+0x2e>
 80039de:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80039e2:	2b19      	cmp	r3, #25
 80039e4:	d801      	bhi.n	80039ea <_strtol_l.isra.0+0xa6>
 80039e6:	3c37      	subs	r4, #55	; 0x37
 80039e8:	e7e2      	b.n	80039b0 <_strtol_l.isra.0+0x6c>
 80039ea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80039ee:	2b19      	cmp	r3, #25
 80039f0:	d804      	bhi.n	80039fc <_strtol_l.isra.0+0xb8>
 80039f2:	3c57      	subs	r4, #87	; 0x57
 80039f4:	e7dc      	b.n	80039b0 <_strtol_l.isra.0+0x6c>
 80039f6:	f04f 37ff 	mov.w	r7, #4294967295
 80039fa:	e7e5      	b.n	80039c8 <_strtol_l.isra.0+0x84>
 80039fc:	1c7b      	adds	r3, r7, #1
 80039fe:	d108      	bne.n	8003a12 <_strtol_l.isra.0+0xce>
 8003a00:	2322      	movs	r3, #34	; 0x22
 8003a02:	f8c8 3000 	str.w	r3, [r8]
 8003a06:	4608      	mov	r0, r1
 8003a08:	f1ba 0f00 	cmp.w	sl, #0
 8003a0c:	d107      	bne.n	8003a1e <_strtol_l.isra.0+0xda>
 8003a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a12:	b102      	cbz	r2, 8003a16 <_strtol_l.isra.0+0xd2>
 8003a14:	4240      	negs	r0, r0
 8003a16:	f1ba 0f00 	cmp.w	sl, #0
 8003a1a:	d0f8      	beq.n	8003a0e <_strtol_l.isra.0+0xca>
 8003a1c:	b10f      	cbz	r7, 8003a22 <_strtol_l.isra.0+0xde>
 8003a1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003a22:	f8ca 9000 	str.w	r9, [sl]
 8003a26:	e7f2      	b.n	8003a0e <_strtol_l.isra.0+0xca>
 8003a28:	2430      	movs	r4, #48	; 0x30
 8003a2a:	2e00      	cmp	r6, #0
 8003a2c:	d1af      	bne.n	800398e <_strtol_l.isra.0+0x4a>
 8003a2e:	2608      	movs	r6, #8
 8003a30:	e7ad      	b.n	800398e <_strtol_l.isra.0+0x4a>
 8003a32:	2c30      	cmp	r4, #48	; 0x30
 8003a34:	d0a3      	beq.n	800397e <_strtol_l.isra.0+0x3a>
 8003a36:	260a      	movs	r6, #10
 8003a38:	e7a9      	b.n	800398e <_strtol_l.isra.0+0x4a>
	...

08003a3c <strtol>:
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <strtol+0x24>)
 8003a3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a40:	681c      	ldr	r4, [r3, #0]
 8003a42:	4d08      	ldr	r5, [pc, #32]	; (8003a64 <strtol+0x28>)
 8003a44:	6a23      	ldr	r3, [r4, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf08      	it	eq
 8003a4a:	462b      	moveq	r3, r5
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	460a      	mov	r2, r1
 8003a52:	4601      	mov	r1, r0
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff ff75 	bl	8003944 <_strtol_l.isra.0>
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bd30      	pop	{r4, r5, pc}
 8003a5e:	bf00      	nop
 8003a60:	2000000c 	.word	0x2000000c
 8003a64:	20000070 	.word	0x20000070

08003a68 <__locale_ctype_ptr_l>:
 8003a68:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003a6c:	4770      	bx	lr

08003a6e <__ascii_mbtowc>:
 8003a6e:	b082      	sub	sp, #8
 8003a70:	b901      	cbnz	r1, 8003a74 <__ascii_mbtowc+0x6>
 8003a72:	a901      	add	r1, sp, #4
 8003a74:	b142      	cbz	r2, 8003a88 <__ascii_mbtowc+0x1a>
 8003a76:	b14b      	cbz	r3, 8003a8c <__ascii_mbtowc+0x1e>
 8003a78:	7813      	ldrb	r3, [r2, #0]
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	1c10      	adds	r0, r2, #0
 8003a80:	bf18      	it	ne
 8003a82:	2001      	movne	r0, #1
 8003a84:	b002      	add	sp, #8
 8003a86:	4770      	bx	lr
 8003a88:	4610      	mov	r0, r2
 8003a8a:	e7fb      	b.n	8003a84 <__ascii_mbtowc+0x16>
 8003a8c:	f06f 0001 	mvn.w	r0, #1
 8003a90:	e7f8      	b.n	8003a84 <__ascii_mbtowc+0x16>

08003a92 <__ssputs_r>:
 8003a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a96:	688e      	ldr	r6, [r1, #8]
 8003a98:	429e      	cmp	r6, r3
 8003a9a:	4682      	mov	sl, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	4690      	mov	r8, r2
 8003aa0:	4699      	mov	r9, r3
 8003aa2:	d837      	bhi.n	8003b14 <__ssputs_r+0x82>
 8003aa4:	898a      	ldrh	r2, [r1, #12]
 8003aa6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003aaa:	d031      	beq.n	8003b10 <__ssputs_r+0x7e>
 8003aac:	6825      	ldr	r5, [r4, #0]
 8003aae:	6909      	ldr	r1, [r1, #16]
 8003ab0:	1a6f      	subs	r7, r5, r1
 8003ab2:	6965      	ldr	r5, [r4, #20]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aba:	fb95 f5f3 	sdiv	r5, r5, r3
 8003abe:	f109 0301 	add.w	r3, r9, #1
 8003ac2:	443b      	add	r3, r7
 8003ac4:	429d      	cmp	r5, r3
 8003ac6:	bf38      	it	cc
 8003ac8:	461d      	movcc	r5, r3
 8003aca:	0553      	lsls	r3, r2, #21
 8003acc:	d530      	bpl.n	8003b30 <__ssputs_r+0x9e>
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f000 fb3a 	bl	8004148 <_malloc_r>
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	b950      	cbnz	r0, 8003aee <__ssputs_r+0x5c>
 8003ad8:	230c      	movs	r3, #12
 8003ada:	f8ca 3000 	str.w	r3, [sl]
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae4:	81a3      	strh	r3, [r4, #12]
 8003ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aee:	463a      	mov	r2, r7
 8003af0:	6921      	ldr	r1, [r4, #16]
 8003af2:	f000 fab6 	bl	8004062 <memcpy>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	6126      	str	r6, [r4, #16]
 8003b04:	6165      	str	r5, [r4, #20]
 8003b06:	443e      	add	r6, r7
 8003b08:	1bed      	subs	r5, r5, r7
 8003b0a:	6026      	str	r6, [r4, #0]
 8003b0c:	60a5      	str	r5, [r4, #8]
 8003b0e:	464e      	mov	r6, r9
 8003b10:	454e      	cmp	r6, r9
 8003b12:	d900      	bls.n	8003b16 <__ssputs_r+0x84>
 8003b14:	464e      	mov	r6, r9
 8003b16:	4632      	mov	r2, r6
 8003b18:	4641      	mov	r1, r8
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	f000 faac 	bl	8004078 <memmove>
 8003b20:	68a3      	ldr	r3, [r4, #8]
 8003b22:	1b9b      	subs	r3, r3, r6
 8003b24:	60a3      	str	r3, [r4, #8]
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	441e      	add	r6, r3
 8003b2a:	6026      	str	r6, [r4, #0]
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e7dc      	b.n	8003aea <__ssputs_r+0x58>
 8003b30:	462a      	mov	r2, r5
 8003b32:	f000 fb63 	bl	80041fc <_realloc_r>
 8003b36:	4606      	mov	r6, r0
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d1e2      	bne.n	8003b02 <__ssputs_r+0x70>
 8003b3c:	6921      	ldr	r1, [r4, #16]
 8003b3e:	4650      	mov	r0, sl
 8003b40:	f000 fab4 	bl	80040ac <_free_r>
 8003b44:	e7c8      	b.n	8003ad8 <__ssputs_r+0x46>
	...

08003b48 <_svfiprintf_r>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	461d      	mov	r5, r3
 8003b4e:	898b      	ldrh	r3, [r1, #12]
 8003b50:	061f      	lsls	r7, r3, #24
 8003b52:	b09d      	sub	sp, #116	; 0x74
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	4616      	mov	r6, r2
 8003b5a:	d50f      	bpl.n	8003b7c <_svfiprintf_r+0x34>
 8003b5c:	690b      	ldr	r3, [r1, #16]
 8003b5e:	b96b      	cbnz	r3, 8003b7c <_svfiprintf_r+0x34>
 8003b60:	2140      	movs	r1, #64	; 0x40
 8003b62:	f000 faf1 	bl	8004148 <_malloc_r>
 8003b66:	6020      	str	r0, [r4, #0]
 8003b68:	6120      	str	r0, [r4, #16]
 8003b6a:	b928      	cbnz	r0, 8003b78 <_svfiprintf_r+0x30>
 8003b6c:	230c      	movs	r3, #12
 8003b6e:	f8c8 3000 	str.w	r3, [r8]
 8003b72:	f04f 30ff 	mov.w	r0, #4294967295
 8003b76:	e0c8      	b.n	8003d0a <_svfiprintf_r+0x1c2>
 8003b78:	2340      	movs	r3, #64	; 0x40
 8003b7a:	6163      	str	r3, [r4, #20]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b80:	2320      	movs	r3, #32
 8003b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b86:	2330      	movs	r3, #48	; 0x30
 8003b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b8c:	9503      	str	r5, [sp, #12]
 8003b8e:	f04f 0b01 	mov.w	fp, #1
 8003b92:	4637      	mov	r7, r6
 8003b94:	463d      	mov	r5, r7
 8003b96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b9a:	b10b      	cbz	r3, 8003ba0 <_svfiprintf_r+0x58>
 8003b9c:	2b25      	cmp	r3, #37	; 0x25
 8003b9e:	d13e      	bne.n	8003c1e <_svfiprintf_r+0xd6>
 8003ba0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ba4:	d00b      	beq.n	8003bbe <_svfiprintf_r+0x76>
 8003ba6:	4653      	mov	r3, sl
 8003ba8:	4632      	mov	r2, r6
 8003baa:	4621      	mov	r1, r4
 8003bac:	4640      	mov	r0, r8
 8003bae:	f7ff ff70 	bl	8003a92 <__ssputs_r>
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	f000 80a4 	beq.w	8003d00 <_svfiprintf_r+0x1b8>
 8003bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bba:	4453      	add	r3, sl
 8003bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbe:	783b      	ldrb	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 809d 	beq.w	8003d00 <_svfiprintf_r+0x1b8>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bd0:	9304      	str	r3, [sp, #16]
 8003bd2:	9307      	str	r3, [sp, #28]
 8003bd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bd8:	931a      	str	r3, [sp, #104]	; 0x68
 8003bda:	462f      	mov	r7, r5
 8003bdc:	2205      	movs	r2, #5
 8003bde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003be2:	4850      	ldr	r0, [pc, #320]	; (8003d24 <_svfiprintf_r+0x1dc>)
 8003be4:	f7fc fafc 	bl	80001e0 <memchr>
 8003be8:	9b04      	ldr	r3, [sp, #16]
 8003bea:	b9d0      	cbnz	r0, 8003c22 <_svfiprintf_r+0xda>
 8003bec:	06d9      	lsls	r1, r3, #27
 8003bee:	bf44      	itt	mi
 8003bf0:	2220      	movmi	r2, #32
 8003bf2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bf6:	071a      	lsls	r2, r3, #28
 8003bf8:	bf44      	itt	mi
 8003bfa:	222b      	movmi	r2, #43	; 0x2b
 8003bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c00:	782a      	ldrb	r2, [r5, #0]
 8003c02:	2a2a      	cmp	r2, #42	; 0x2a
 8003c04:	d015      	beq.n	8003c32 <_svfiprintf_r+0xea>
 8003c06:	9a07      	ldr	r2, [sp, #28]
 8003c08:	462f      	mov	r7, r5
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	250a      	movs	r5, #10
 8003c0e:	4639      	mov	r1, r7
 8003c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c14:	3b30      	subs	r3, #48	; 0x30
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d94d      	bls.n	8003cb6 <_svfiprintf_r+0x16e>
 8003c1a:	b1b8      	cbz	r0, 8003c4c <_svfiprintf_r+0x104>
 8003c1c:	e00f      	b.n	8003c3e <_svfiprintf_r+0xf6>
 8003c1e:	462f      	mov	r7, r5
 8003c20:	e7b8      	b.n	8003b94 <_svfiprintf_r+0x4c>
 8003c22:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <_svfiprintf_r+0x1dc>)
 8003c24:	1a80      	subs	r0, r0, r2
 8003c26:	fa0b f000 	lsl.w	r0, fp, r0
 8003c2a:	4318      	orrs	r0, r3
 8003c2c:	9004      	str	r0, [sp, #16]
 8003c2e:	463d      	mov	r5, r7
 8003c30:	e7d3      	b.n	8003bda <_svfiprintf_r+0x92>
 8003c32:	9a03      	ldr	r2, [sp, #12]
 8003c34:	1d11      	adds	r1, r2, #4
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	9103      	str	r1, [sp, #12]
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	db01      	blt.n	8003c42 <_svfiprintf_r+0xfa>
 8003c3e:	9207      	str	r2, [sp, #28]
 8003c40:	e004      	b.n	8003c4c <_svfiprintf_r+0x104>
 8003c42:	4252      	negs	r2, r2
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	9207      	str	r2, [sp, #28]
 8003c4a:	9304      	str	r3, [sp, #16]
 8003c4c:	783b      	ldrb	r3, [r7, #0]
 8003c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c50:	d10c      	bne.n	8003c6c <_svfiprintf_r+0x124>
 8003c52:	787b      	ldrb	r3, [r7, #1]
 8003c54:	2b2a      	cmp	r3, #42	; 0x2a
 8003c56:	d133      	bne.n	8003cc0 <_svfiprintf_r+0x178>
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bfb8      	it	lt
 8003c64:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c68:	3702      	adds	r7, #2
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	4d2e      	ldr	r5, [pc, #184]	; (8003d28 <_svfiprintf_r+0x1e0>)
 8003c6e:	7839      	ldrb	r1, [r7, #0]
 8003c70:	2203      	movs	r2, #3
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7fc fab4 	bl	80001e0 <memchr>
 8003c78:	b138      	cbz	r0, 8003c8a <_svfiprintf_r+0x142>
 8003c7a:	2340      	movs	r3, #64	; 0x40
 8003c7c:	1b40      	subs	r0, r0, r5
 8003c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c82:	9b04      	ldr	r3, [sp, #16]
 8003c84:	4303      	orrs	r3, r0
 8003c86:	3701      	adds	r7, #1
 8003c88:	9304      	str	r3, [sp, #16]
 8003c8a:	7839      	ldrb	r1, [r7, #0]
 8003c8c:	4827      	ldr	r0, [pc, #156]	; (8003d2c <_svfiprintf_r+0x1e4>)
 8003c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c92:	2206      	movs	r2, #6
 8003c94:	1c7e      	adds	r6, r7, #1
 8003c96:	f7fc faa3 	bl	80001e0 <memchr>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d038      	beq.n	8003d10 <_svfiprintf_r+0x1c8>
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <_svfiprintf_r+0x1e8>)
 8003ca0:	bb13      	cbnz	r3, 8003ce8 <_svfiprintf_r+0x1a0>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	3307      	adds	r3, #7
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	3308      	adds	r3, #8
 8003cac:	9303      	str	r3, [sp, #12]
 8003cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb0:	444b      	add	r3, r9
 8003cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb4:	e76d      	b.n	8003b92 <_svfiprintf_r+0x4a>
 8003cb6:	fb05 3202 	mla	r2, r5, r2, r3
 8003cba:	2001      	movs	r0, #1
 8003cbc:	460f      	mov	r7, r1
 8003cbe:	e7a6      	b.n	8003c0e <_svfiprintf_r+0xc6>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	3701      	adds	r7, #1
 8003cc4:	9305      	str	r3, [sp, #20]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	250a      	movs	r5, #10
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd0:	3a30      	subs	r2, #48	; 0x30
 8003cd2:	2a09      	cmp	r2, #9
 8003cd4:	d903      	bls.n	8003cde <_svfiprintf_r+0x196>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0c8      	beq.n	8003c6c <_svfiprintf_r+0x124>
 8003cda:	9105      	str	r1, [sp, #20]
 8003cdc:	e7c6      	b.n	8003c6c <_svfiprintf_r+0x124>
 8003cde:	fb05 2101 	mla	r1, r5, r1, r2
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4607      	mov	r7, r0
 8003ce6:	e7f0      	b.n	8003cca <_svfiprintf_r+0x182>
 8003ce8:	ab03      	add	r3, sp, #12
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4622      	mov	r2, r4
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <_svfiprintf_r+0x1ec>)
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003cfc:	4681      	mov	r9, r0
 8003cfe:	d1d6      	bne.n	8003cae <_svfiprintf_r+0x166>
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	065b      	lsls	r3, r3, #25
 8003d04:	f53f af35 	bmi.w	8003b72 <_svfiprintf_r+0x2a>
 8003d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d0a:	b01d      	add	sp, #116	; 0x74
 8003d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d10:	ab03      	add	r3, sp, #12
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	4622      	mov	r2, r4
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <_svfiprintf_r+0x1ec>)
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	f000 f882 	bl	8003e24 <_printf_i>
 8003d20:	e7ea      	b.n	8003cf8 <_svfiprintf_r+0x1b0>
 8003d22:	bf00      	nop
 8003d24:	080042de 	.word	0x080042de
 8003d28:	080042e4 	.word	0x080042e4
 8003d2c:	080042e8 	.word	0x080042e8
 8003d30:	00000000 	.word	0x00000000
 8003d34:	08003a93 	.word	0x08003a93

08003d38 <_printf_common>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	4691      	mov	r9, r2
 8003d3e:	461f      	mov	r7, r3
 8003d40:	688a      	ldr	r2, [r1, #8]
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bfb8      	it	lt
 8003d4c:	4613      	movlt	r3, r2
 8003d4e:	f8c9 3000 	str.w	r3, [r9]
 8003d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d56:	4606      	mov	r6, r0
 8003d58:	460c      	mov	r4, r1
 8003d5a:	b112      	cbz	r2, 8003d62 <_printf_common+0x2a>
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f8c9 3000 	str.w	r3, [r9]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	0699      	lsls	r1, r3, #26
 8003d66:	bf42      	ittt	mi
 8003d68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d6c:	3302      	addmi	r3, #2
 8003d6e:	f8c9 3000 	strmi.w	r3, [r9]
 8003d72:	6825      	ldr	r5, [r4, #0]
 8003d74:	f015 0506 	ands.w	r5, r5, #6
 8003d78:	d107      	bne.n	8003d8a <_printf_common+0x52>
 8003d7a:	f104 0a19 	add.w	sl, r4, #25
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	f8d9 2000 	ldr.w	r2, [r9]
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	42ab      	cmp	r3, r5
 8003d88:	dc28      	bgt.n	8003ddc <_printf_common+0xa4>
 8003d8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	3300      	adds	r3, #0
 8003d92:	bf18      	it	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	0692      	lsls	r2, r2, #26
 8003d98:	d42d      	bmi.n	8003df6 <_printf_common+0xbe>
 8003d9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d9e:	4639      	mov	r1, r7
 8003da0:	4630      	mov	r0, r6
 8003da2:	47c0      	blx	r8
 8003da4:	3001      	adds	r0, #1
 8003da6:	d020      	beq.n	8003dea <_printf_common+0xb2>
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	68e5      	ldr	r5, [r4, #12]
 8003dac:	f8d9 2000 	ldr.w	r2, [r9]
 8003db0:	f003 0306 	and.w	r3, r3, #6
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	bf08      	it	eq
 8003db8:	1aad      	subeq	r5, r5, r2
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	6922      	ldr	r2, [r4, #16]
 8003dbe:	bf0c      	ite	eq
 8003dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc4:	2500      	movne	r5, #0
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	bfc4      	itt	gt
 8003dca:	1a9b      	subgt	r3, r3, r2
 8003dcc:	18ed      	addgt	r5, r5, r3
 8003dce:	f04f 0900 	mov.w	r9, #0
 8003dd2:	341a      	adds	r4, #26
 8003dd4:	454d      	cmp	r5, r9
 8003dd6:	d11a      	bne.n	8003e0e <_printf_common+0xd6>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	e008      	b.n	8003dee <_printf_common+0xb6>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4652      	mov	r2, sl
 8003de0:	4639      	mov	r1, r7
 8003de2:	4630      	mov	r0, r6
 8003de4:	47c0      	blx	r8
 8003de6:	3001      	adds	r0, #1
 8003de8:	d103      	bne.n	8003df2 <_printf_common+0xba>
 8003dea:	f04f 30ff 	mov.w	r0, #4294967295
 8003dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df2:	3501      	adds	r5, #1
 8003df4:	e7c3      	b.n	8003d7e <_printf_common+0x46>
 8003df6:	18e1      	adds	r1, r4, r3
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	2030      	movs	r0, #48	; 0x30
 8003dfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e00:	4422      	add	r2, r4
 8003e02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	e7c5      	b.n	8003d9a <_printf_common+0x62>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4622      	mov	r2, r4
 8003e12:	4639      	mov	r1, r7
 8003e14:	4630      	mov	r0, r6
 8003e16:	47c0      	blx	r8
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d0e6      	beq.n	8003dea <_printf_common+0xb2>
 8003e1c:	f109 0901 	add.w	r9, r9, #1
 8003e20:	e7d8      	b.n	8003dd4 <_printf_common+0x9c>
	...

08003e24 <_printf_i>:
 8003e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	7e09      	ldrb	r1, [r1, #24]
 8003e30:	b085      	sub	sp, #20
 8003e32:	296e      	cmp	r1, #110	; 0x6e
 8003e34:	4617      	mov	r7, r2
 8003e36:	4606      	mov	r6, r0
 8003e38:	4698      	mov	r8, r3
 8003e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e3c:	f000 80b3 	beq.w	8003fa6 <_printf_i+0x182>
 8003e40:	d822      	bhi.n	8003e88 <_printf_i+0x64>
 8003e42:	2963      	cmp	r1, #99	; 0x63
 8003e44:	d036      	beq.n	8003eb4 <_printf_i+0x90>
 8003e46:	d80a      	bhi.n	8003e5e <_printf_i+0x3a>
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	f000 80b9 	beq.w	8003fc0 <_printf_i+0x19c>
 8003e4e:	2958      	cmp	r1, #88	; 0x58
 8003e50:	f000 8083 	beq.w	8003f5a <_printf_i+0x136>
 8003e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e5c:	e032      	b.n	8003ec4 <_printf_i+0xa0>
 8003e5e:	2964      	cmp	r1, #100	; 0x64
 8003e60:	d001      	beq.n	8003e66 <_printf_i+0x42>
 8003e62:	2969      	cmp	r1, #105	; 0x69
 8003e64:	d1f6      	bne.n	8003e54 <_printf_i+0x30>
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	0605      	lsls	r5, r0, #24
 8003e6c:	f103 0104 	add.w	r1, r3, #4
 8003e70:	d52a      	bpl.n	8003ec8 <_printf_i+0xa4>
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6011      	str	r1, [r2, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	da03      	bge.n	8003e82 <_printf_i+0x5e>
 8003e7a:	222d      	movs	r2, #45	; 0x2d
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e82:	486f      	ldr	r0, [pc, #444]	; (8004040 <_printf_i+0x21c>)
 8003e84:	220a      	movs	r2, #10
 8003e86:	e039      	b.n	8003efc <_printf_i+0xd8>
 8003e88:	2973      	cmp	r1, #115	; 0x73
 8003e8a:	f000 809d 	beq.w	8003fc8 <_printf_i+0x1a4>
 8003e8e:	d808      	bhi.n	8003ea2 <_printf_i+0x7e>
 8003e90:	296f      	cmp	r1, #111	; 0x6f
 8003e92:	d020      	beq.n	8003ed6 <_printf_i+0xb2>
 8003e94:	2970      	cmp	r1, #112	; 0x70
 8003e96:	d1dd      	bne.n	8003e54 <_printf_i+0x30>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	f043 0320 	orr.w	r3, r3, #32
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	e003      	b.n	8003eaa <_printf_i+0x86>
 8003ea2:	2975      	cmp	r1, #117	; 0x75
 8003ea4:	d017      	beq.n	8003ed6 <_printf_i+0xb2>
 8003ea6:	2978      	cmp	r1, #120	; 0x78
 8003ea8:	d1d4      	bne.n	8003e54 <_printf_i+0x30>
 8003eaa:	2378      	movs	r3, #120	; 0x78
 8003eac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eb0:	4864      	ldr	r0, [pc, #400]	; (8004044 <_printf_i+0x220>)
 8003eb2:	e055      	b.n	8003f60 <_printf_i+0x13c>
 8003eb4:	6813      	ldr	r3, [r2, #0]
 8003eb6:	1d19      	adds	r1, r3, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6011      	str	r1, [r2, #0]
 8003ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e08c      	b.n	8003fe2 <_printf_i+0x1be>
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6011      	str	r1, [r2, #0]
 8003ecc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ed0:	bf18      	it	ne
 8003ed2:	b21b      	sxthne	r3, r3
 8003ed4:	e7cf      	b.n	8003e76 <_printf_i+0x52>
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	6825      	ldr	r5, [r4, #0]
 8003eda:	1d18      	adds	r0, r3, #4
 8003edc:	6010      	str	r0, [r2, #0]
 8003ede:	0628      	lsls	r0, r5, #24
 8003ee0:	d501      	bpl.n	8003ee6 <_printf_i+0xc2>
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	e002      	b.n	8003eec <_printf_i+0xc8>
 8003ee6:	0668      	lsls	r0, r5, #25
 8003ee8:	d5fb      	bpl.n	8003ee2 <_printf_i+0xbe>
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	4854      	ldr	r0, [pc, #336]	; (8004040 <_printf_i+0x21c>)
 8003eee:	296f      	cmp	r1, #111	; 0x6f
 8003ef0:	bf14      	ite	ne
 8003ef2:	220a      	movne	r2, #10
 8003ef4:	2208      	moveq	r2, #8
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003efc:	6865      	ldr	r5, [r4, #4]
 8003efe:	60a5      	str	r5, [r4, #8]
 8003f00:	2d00      	cmp	r5, #0
 8003f02:	f2c0 8095 	blt.w	8004030 <_printf_i+0x20c>
 8003f06:	6821      	ldr	r1, [r4, #0]
 8003f08:	f021 0104 	bic.w	r1, r1, #4
 8003f0c:	6021      	str	r1, [r4, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d13d      	bne.n	8003f8e <_printf_i+0x16a>
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	f040 808e 	bne.w	8004034 <_printf_i+0x210>
 8003f18:	4665      	mov	r5, ip
 8003f1a:	2a08      	cmp	r2, #8
 8003f1c:	d10b      	bne.n	8003f36 <_printf_i+0x112>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d508      	bpl.n	8003f36 <_printf_i+0x112>
 8003f24:	6923      	ldr	r3, [r4, #16]
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bfde      	ittt	le
 8003f2c:	2330      	movle	r3, #48	; 0x30
 8003f2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f36:	ebac 0305 	sub.w	r3, ip, r5
 8003f3a:	6123      	str	r3, [r4, #16]
 8003f3c:	f8cd 8000 	str.w	r8, [sp]
 8003f40:	463b      	mov	r3, r7
 8003f42:	aa03      	add	r2, sp, #12
 8003f44:	4621      	mov	r1, r4
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff fef6 	bl	8003d38 <_printf_common>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d14d      	bne.n	8003fec <_printf_i+0x1c8>
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	b005      	add	sp, #20
 8003f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f5a:	4839      	ldr	r0, [pc, #228]	; (8004040 <_printf_i+0x21c>)
 8003f5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	6821      	ldr	r1, [r4, #0]
 8003f64:	1d1d      	adds	r5, r3, #4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6015      	str	r5, [r2, #0]
 8003f6a:	060a      	lsls	r2, r1, #24
 8003f6c:	d50b      	bpl.n	8003f86 <_printf_i+0x162>
 8003f6e:	07ca      	lsls	r2, r1, #31
 8003f70:	bf44      	itt	mi
 8003f72:	f041 0120 	orrmi.w	r1, r1, #32
 8003f76:	6021      	strmi	r1, [r4, #0]
 8003f78:	b91b      	cbnz	r3, 8003f82 <_printf_i+0x15e>
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	f022 0220 	bic.w	r2, r2, #32
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	2210      	movs	r2, #16
 8003f84:	e7b7      	b.n	8003ef6 <_printf_i+0xd2>
 8003f86:	064d      	lsls	r5, r1, #25
 8003f88:	bf48      	it	mi
 8003f8a:	b29b      	uxthmi	r3, r3
 8003f8c:	e7ef      	b.n	8003f6e <_printf_i+0x14a>
 8003f8e:	4665      	mov	r5, ip
 8003f90:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f94:	fb02 3311 	mls	r3, r2, r1, r3
 8003f98:	5cc3      	ldrb	r3, [r0, r3]
 8003f9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	d1f5      	bne.n	8003f90 <_printf_i+0x16c>
 8003fa4:	e7b9      	b.n	8003f1a <_printf_i+0xf6>
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	6825      	ldr	r5, [r4, #0]
 8003faa:	6961      	ldr	r1, [r4, #20]
 8003fac:	1d18      	adds	r0, r3, #4
 8003fae:	6010      	str	r0, [r2, #0]
 8003fb0:	0628      	lsls	r0, r5, #24
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	d501      	bpl.n	8003fba <_printf_i+0x196>
 8003fb6:	6019      	str	r1, [r3, #0]
 8003fb8:	e002      	b.n	8003fc0 <_printf_i+0x19c>
 8003fba:	066a      	lsls	r2, r5, #25
 8003fbc:	d5fb      	bpl.n	8003fb6 <_printf_i+0x192>
 8003fbe:	8019      	strh	r1, [r3, #0]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6123      	str	r3, [r4, #16]
 8003fc4:	4665      	mov	r5, ip
 8003fc6:	e7b9      	b.n	8003f3c <_printf_i+0x118>
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	6011      	str	r1, [r2, #0]
 8003fce:	681d      	ldr	r5, [r3, #0]
 8003fd0:	6862      	ldr	r2, [r4, #4]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f7fc f903 	bl	80001e0 <memchr>
 8003fda:	b108      	cbz	r0, 8003fe0 <_printf_i+0x1bc>
 8003fdc:	1b40      	subs	r0, r0, r5
 8003fde:	6060      	str	r0, [r4, #4]
 8003fe0:	6863      	ldr	r3, [r4, #4]
 8003fe2:	6123      	str	r3, [r4, #16]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fea:	e7a7      	b.n	8003f3c <_printf_i+0x118>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	462a      	mov	r2, r5
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	47c0      	blx	r8
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d0aa      	beq.n	8003f50 <_printf_i+0x12c>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	079b      	lsls	r3, r3, #30
 8003ffe:	d413      	bmi.n	8004028 <_printf_i+0x204>
 8004000:	68e0      	ldr	r0, [r4, #12]
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	4298      	cmp	r0, r3
 8004006:	bfb8      	it	lt
 8004008:	4618      	movlt	r0, r3
 800400a:	e7a3      	b.n	8003f54 <_printf_i+0x130>
 800400c:	2301      	movs	r3, #1
 800400e:	464a      	mov	r2, r9
 8004010:	4639      	mov	r1, r7
 8004012:	4630      	mov	r0, r6
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d09a      	beq.n	8003f50 <_printf_i+0x12c>
 800401a:	3501      	adds	r5, #1
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	9a03      	ldr	r2, [sp, #12]
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	42ab      	cmp	r3, r5
 8004024:	dcf2      	bgt.n	800400c <_printf_i+0x1e8>
 8004026:	e7eb      	b.n	8004000 <_printf_i+0x1dc>
 8004028:	2500      	movs	r5, #0
 800402a:	f104 0919 	add.w	r9, r4, #25
 800402e:	e7f5      	b.n	800401c <_printf_i+0x1f8>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ac      	bne.n	8003f8e <_printf_i+0x16a>
 8004034:	7803      	ldrb	r3, [r0, #0]
 8004036:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800403a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800403e:	e76c      	b.n	8003f1a <_printf_i+0xf6>
 8004040:	080042ef 	.word	0x080042ef
 8004044:	08004300 	.word	0x08004300

08004048 <__ascii_wctomb>:
 8004048:	b149      	cbz	r1, 800405e <__ascii_wctomb+0x16>
 800404a:	2aff      	cmp	r2, #255	; 0xff
 800404c:	bf85      	ittet	hi
 800404e:	238a      	movhi	r3, #138	; 0x8a
 8004050:	6003      	strhi	r3, [r0, #0]
 8004052:	700a      	strbls	r2, [r1, #0]
 8004054:	f04f 30ff 	movhi.w	r0, #4294967295
 8004058:	bf98      	it	ls
 800405a:	2001      	movls	r0, #1
 800405c:	4770      	bx	lr
 800405e:	4608      	mov	r0, r1
 8004060:	4770      	bx	lr

08004062 <memcpy>:
 8004062:	b510      	push	{r4, lr}
 8004064:	1e43      	subs	r3, r0, #1
 8004066:	440a      	add	r2, r1
 8004068:	4291      	cmp	r1, r2
 800406a:	d100      	bne.n	800406e <memcpy+0xc>
 800406c:	bd10      	pop	{r4, pc}
 800406e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004076:	e7f7      	b.n	8004068 <memcpy+0x6>

08004078 <memmove>:
 8004078:	4288      	cmp	r0, r1
 800407a:	b510      	push	{r4, lr}
 800407c:	eb01 0302 	add.w	r3, r1, r2
 8004080:	d807      	bhi.n	8004092 <memmove+0x1a>
 8004082:	1e42      	subs	r2, r0, #1
 8004084:	4299      	cmp	r1, r3
 8004086:	d00a      	beq.n	800409e <memmove+0x26>
 8004088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800408c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004090:	e7f8      	b.n	8004084 <memmove+0xc>
 8004092:	4283      	cmp	r3, r0
 8004094:	d9f5      	bls.n	8004082 <memmove+0xa>
 8004096:	1881      	adds	r1, r0, r2
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	42d3      	cmn	r3, r2
 800409c:	d100      	bne.n	80040a0 <memmove+0x28>
 800409e:	bd10      	pop	{r4, pc}
 80040a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80040a8:	e7f7      	b.n	800409a <memmove+0x22>
	...

080040ac <_free_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d045      	beq.n	8004140 <_free_r+0x94>
 80040b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b8:	1f0c      	subs	r4, r1, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfb8      	it	lt
 80040be:	18e4      	addlt	r4, r4, r3
 80040c0:	f000 f8d2 	bl	8004268 <__malloc_lock>
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <_free_r+0x98>)
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	4610      	mov	r0, r2
 80040ca:	b933      	cbnz	r3, 80040da <_free_r+0x2e>
 80040cc:	6063      	str	r3, [r4, #4]
 80040ce:	6014      	str	r4, [r2, #0]
 80040d0:	4628      	mov	r0, r5
 80040d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d6:	f000 b8c8 	b.w	800426a <__malloc_unlock>
 80040da:	42a3      	cmp	r3, r4
 80040dc:	d90c      	bls.n	80040f8 <_free_r+0x4c>
 80040de:	6821      	ldr	r1, [r4, #0]
 80040e0:	1862      	adds	r2, r4, r1
 80040e2:	4293      	cmp	r3, r2
 80040e4:	bf04      	itt	eq
 80040e6:	681a      	ldreq	r2, [r3, #0]
 80040e8:	685b      	ldreq	r3, [r3, #4]
 80040ea:	6063      	str	r3, [r4, #4]
 80040ec:	bf04      	itt	eq
 80040ee:	1852      	addeq	r2, r2, r1
 80040f0:	6022      	streq	r2, [r4, #0]
 80040f2:	6004      	str	r4, [r0, #0]
 80040f4:	e7ec      	b.n	80040d0 <_free_r+0x24>
 80040f6:	4613      	mov	r3, r2
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	b10a      	cbz	r2, 8004100 <_free_r+0x54>
 80040fc:	42a2      	cmp	r2, r4
 80040fe:	d9fa      	bls.n	80040f6 <_free_r+0x4a>
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	1858      	adds	r0, r3, r1
 8004104:	42a0      	cmp	r0, r4
 8004106:	d10b      	bne.n	8004120 <_free_r+0x74>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	4401      	add	r1, r0
 800410c:	1858      	adds	r0, r3, r1
 800410e:	4282      	cmp	r2, r0
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	d1dd      	bne.n	80040d0 <_free_r+0x24>
 8004114:	6810      	ldr	r0, [r2, #0]
 8004116:	6852      	ldr	r2, [r2, #4]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	4401      	add	r1, r0
 800411c:	6019      	str	r1, [r3, #0]
 800411e:	e7d7      	b.n	80040d0 <_free_r+0x24>
 8004120:	d902      	bls.n	8004128 <_free_r+0x7c>
 8004122:	230c      	movs	r3, #12
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	e7d3      	b.n	80040d0 <_free_r+0x24>
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	1821      	adds	r1, r4, r0
 800412c:	428a      	cmp	r2, r1
 800412e:	bf04      	itt	eq
 8004130:	6811      	ldreq	r1, [r2, #0]
 8004132:	6852      	ldreq	r2, [r2, #4]
 8004134:	6062      	str	r2, [r4, #4]
 8004136:	bf04      	itt	eq
 8004138:	1809      	addeq	r1, r1, r0
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	605c      	str	r4, [r3, #4]
 800413e:	e7c7      	b.n	80040d0 <_free_r+0x24>
 8004140:	bd38      	pop	{r3, r4, r5, pc}
 8004142:	bf00      	nop
 8004144:	200001fc 	.word	0x200001fc

08004148 <_malloc_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	1ccd      	adds	r5, r1, #3
 800414c:	f025 0503 	bic.w	r5, r5, #3
 8004150:	3508      	adds	r5, #8
 8004152:	2d0c      	cmp	r5, #12
 8004154:	bf38      	it	cc
 8004156:	250c      	movcc	r5, #12
 8004158:	2d00      	cmp	r5, #0
 800415a:	4606      	mov	r6, r0
 800415c:	db01      	blt.n	8004162 <_malloc_r+0x1a>
 800415e:	42a9      	cmp	r1, r5
 8004160:	d903      	bls.n	800416a <_malloc_r+0x22>
 8004162:	230c      	movs	r3, #12
 8004164:	6033      	str	r3, [r6, #0]
 8004166:	2000      	movs	r0, #0
 8004168:	bd70      	pop	{r4, r5, r6, pc}
 800416a:	f000 f87d 	bl	8004268 <__malloc_lock>
 800416e:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <_malloc_r+0xac>)
 8004170:	6814      	ldr	r4, [r2, #0]
 8004172:	4621      	mov	r1, r4
 8004174:	b991      	cbnz	r1, 800419c <_malloc_r+0x54>
 8004176:	4c20      	ldr	r4, [pc, #128]	; (80041f8 <_malloc_r+0xb0>)
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	b91b      	cbnz	r3, 8004184 <_malloc_r+0x3c>
 800417c:	4630      	mov	r0, r6
 800417e:	f000 f863 	bl	8004248 <_sbrk_r>
 8004182:	6020      	str	r0, [r4, #0]
 8004184:	4629      	mov	r1, r5
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f85e 	bl	8004248 <_sbrk_r>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d124      	bne.n	80041da <_malloc_r+0x92>
 8004190:	230c      	movs	r3, #12
 8004192:	6033      	str	r3, [r6, #0]
 8004194:	4630      	mov	r0, r6
 8004196:	f000 f868 	bl	800426a <__malloc_unlock>
 800419a:	e7e4      	b.n	8004166 <_malloc_r+0x1e>
 800419c:	680b      	ldr	r3, [r1, #0]
 800419e:	1b5b      	subs	r3, r3, r5
 80041a0:	d418      	bmi.n	80041d4 <_malloc_r+0x8c>
 80041a2:	2b0b      	cmp	r3, #11
 80041a4:	d90f      	bls.n	80041c6 <_malloc_r+0x7e>
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	50cd      	str	r5, [r1, r3]
 80041aa:	18cc      	adds	r4, r1, r3
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f85c 	bl	800426a <__malloc_unlock>
 80041b2:	f104 000b 	add.w	r0, r4, #11
 80041b6:	1d23      	adds	r3, r4, #4
 80041b8:	f020 0007 	bic.w	r0, r0, #7
 80041bc:	1ac3      	subs	r3, r0, r3
 80041be:	d0d3      	beq.n	8004168 <_malloc_r+0x20>
 80041c0:	425a      	negs	r2, r3
 80041c2:	50e2      	str	r2, [r4, r3]
 80041c4:	e7d0      	b.n	8004168 <_malloc_r+0x20>
 80041c6:	428c      	cmp	r4, r1
 80041c8:	684b      	ldr	r3, [r1, #4]
 80041ca:	bf16      	itet	ne
 80041cc:	6063      	strne	r3, [r4, #4]
 80041ce:	6013      	streq	r3, [r2, #0]
 80041d0:	460c      	movne	r4, r1
 80041d2:	e7eb      	b.n	80041ac <_malloc_r+0x64>
 80041d4:	460c      	mov	r4, r1
 80041d6:	6849      	ldr	r1, [r1, #4]
 80041d8:	e7cc      	b.n	8004174 <_malloc_r+0x2c>
 80041da:	1cc4      	adds	r4, r0, #3
 80041dc:	f024 0403 	bic.w	r4, r4, #3
 80041e0:	42a0      	cmp	r0, r4
 80041e2:	d005      	beq.n	80041f0 <_malloc_r+0xa8>
 80041e4:	1a21      	subs	r1, r4, r0
 80041e6:	4630      	mov	r0, r6
 80041e8:	f000 f82e 	bl	8004248 <_sbrk_r>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d0cf      	beq.n	8004190 <_malloc_r+0x48>
 80041f0:	6025      	str	r5, [r4, #0]
 80041f2:	e7db      	b.n	80041ac <_malloc_r+0x64>
 80041f4:	200001fc 	.word	0x200001fc
 80041f8:	20000200 	.word	0x20000200

080041fc <_realloc_r>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	4607      	mov	r7, r0
 8004200:	4614      	mov	r4, r2
 8004202:	460e      	mov	r6, r1
 8004204:	b921      	cbnz	r1, 8004210 <_realloc_r+0x14>
 8004206:	4611      	mov	r1, r2
 8004208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800420c:	f7ff bf9c 	b.w	8004148 <_malloc_r>
 8004210:	b922      	cbnz	r2, 800421c <_realloc_r+0x20>
 8004212:	f7ff ff4b 	bl	80040ac <_free_r>
 8004216:	4625      	mov	r5, r4
 8004218:	4628      	mov	r0, r5
 800421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421c:	f000 f826 	bl	800426c <_malloc_usable_size_r>
 8004220:	42a0      	cmp	r0, r4
 8004222:	d20f      	bcs.n	8004244 <_realloc_r+0x48>
 8004224:	4621      	mov	r1, r4
 8004226:	4638      	mov	r0, r7
 8004228:	f7ff ff8e 	bl	8004148 <_malloc_r>
 800422c:	4605      	mov	r5, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	d0f2      	beq.n	8004218 <_realloc_r+0x1c>
 8004232:	4631      	mov	r1, r6
 8004234:	4622      	mov	r2, r4
 8004236:	f7ff ff14 	bl	8004062 <memcpy>
 800423a:	4631      	mov	r1, r6
 800423c:	4638      	mov	r0, r7
 800423e:	f7ff ff35 	bl	80040ac <_free_r>
 8004242:	e7e9      	b.n	8004218 <_realloc_r+0x1c>
 8004244:	4635      	mov	r5, r6
 8004246:	e7e7      	b.n	8004218 <_realloc_r+0x1c>

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4c06      	ldr	r4, [pc, #24]	; (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	f7fc fa6e 	bl	8000734 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200002dc 	.word	0x200002dc

08004268 <__malloc_lock>:
 8004268:	4770      	bx	lr

0800426a <__malloc_unlock>:
 800426a:	4770      	bx	lr

0800426c <_malloc_usable_size_r>:
 800426c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004270:	1f18      	subs	r0, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	bfbc      	itt	lt
 8004276:	580b      	ldrlt	r3, [r1, r0]
 8004278:	18c0      	addlt	r0, r0, r3
 800427a:	4770      	bx	lr

0800427c <_init>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

08004288 <_fini>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr
